import CreateTokenWithTokenMethodRequest, {
    ICreateTokenWithTokenMethodRequest,
} from '@entities/CreateTokenWithTokenMethodRequest';
import CreateTokenWithTokenMethodResponse, {
    ICreateTokenWithTokenMethodResponse,
} from '@entities/CreateTokenWithTokenMethodResponse';
import GetTokenInfoResponse, {
    IGetTokenInfoResponse,
} from '@entities/GetTokenInfoResponse';

// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export default class AuthApi {
    static async CreateTokenWithMethod(
        createtokenwithtokenmethodrequest: ICreateTokenWithTokenMethodRequest,
    ): Promise<ICreateTokenWithTokenMethodResponse | string[] | Error> {
        const haveError: string[] = [];
        const createtokenwithtokenmethodrequestValid = new CreateTokenWithTokenMethodRequest(
            createtokenwithtokenmethodrequest,
        );
        haveError.push(...createtokenwithtokenmethodrequestValid.validate());
        if (haveError.length > 0) {
            return Promise.resolve(haveError);
        }
        return await fetch(`/api/v1/auth/tokens`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(
                createtokenwithtokenmethodrequestValid.serialize(),
            ),
        }).then(async (res) => {
            if (res.status === 200) {
                return res.json();
            } else {
                return new Error(String(res.status));
            }
        });
    }

    static async DeleteToken(): Promise<number | Error> {
        return await fetch(`/api/v1/auth/tokens`, {
            method: 'DELETE',
        }).then(async (res) => {
            if (res.status === 200) {
                return res.status;
            } else {
                return new Error(String(res.status));
            }
        });
    }

    static async GetTokenInfo(): Promise<IGetTokenInfoResponse | Error> {
        return await fetch(`/api/v1/auth/tokens`, {
            method: 'GET',
        }).then(async (res) => {
            if (res.status === 200) {
                return res.json();
            } else {
                return new Error(String(res.status));
            }
        });
    }
}
