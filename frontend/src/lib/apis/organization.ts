import CreateAnOrganizationRequest, {
    ICreateAnOrganizationRequest,
} from '@entities/CreateAnOrganizationRequest';
import CreateAnOrganizationResponse, {
    ICreateAnOrganizationResponse,
} from '@entities/CreateAnOrganizationResponse';
import CreateRelationshipResponse, {
    ICreateRelationshipResponse,
} from '@entities/CreateRelationshipResponse';
import InfoOfUserOrganizationRelationshipResponse, {
    IInfoOfUserOrganizationRelationshipResponse,
} from '@entities/InfoOfUserOrganizationRelationshipResponse';
import ListMembersResponse, {
    IListMembersResponse,
} from '@entities/ListMembersResponse';
import ListOrganizationsResponse, {
    IListOrganizationsResponse,
} from '@entities/ListOrganizationsResponse';
import ReadInfoAboutAnOrganizationResponse, {
    IReadInfoAboutAnOrganizationResponse,
} from '@entities/ReadInfoAboutAnOrganizationResponse';
import UpdateAnOrganizationRequest, {
    IUpdateAnOrganizationRequest,
} from '@entities/UpdateAnOrganizationRequest';
import UpdateAnOrganizationResponse, {
    IUpdateAnOrganizationResponse,
} from '@entities/UpdateAnOrganizationResponse';

// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export default class OrganizationApi {
    static async CreateOrganization(
        createanorganizationrequest: ICreateAnOrganizationRequest,
    ): Promise<ICreateAnOrganizationResponse | string[] | Error> {
        const haveError: string[] = [];
        const createanorganizationrequestValid = new CreateAnOrganizationRequest(
            createanorganizationrequest,
        );
        haveError.push(...createanorganizationrequestValid.validate());
        if (haveError.length > 0) {
            return Promise.resolve(haveError);
        }
        return await fetch(`/api/v1/organizations`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(createanorganizationrequestValid.serialize()),
        }).then(async (res) => {
            if (res.status === 200) {
                return res.json();
            } else {
                return new Error(String(res.status));
            }
        });
    }

    static async CreateRelationship(): Promise<
        ICreateRelationshipResponse | Error
    > {
        return await fetch(
            `/api/v1/organizations/:organization_id/users/:user_id/organization_roles/:organization_role_id`,
            {
                method: 'PUT',
            },
        ).then(async (res) => {
            if (res.status === 200) {
                return res.json();
            } else {
                return new Error(String(res.status));
            }
        });
    }

    static async DeleteOrganization(): Promise<number | Error> {
        return await fetch(`/api/v1/organizations/:organization_id`, {
            method: 'DELETE',
        }).then(async (res) => {
            if (res.status === 200) {
                return res.status;
            } else {
                return new Error(String(res.status));
            }
        });
    }

    static async DeleteRelationship(): Promise<number | Error> {
        return await fetch(
            `/api/v1/organizations/:organization_id/users/:user_id/organization_roles/:organization_role_id`,
            {
                method: 'DELETE',
            },
        ).then(async (res) => {
            if (res.status === 200) {
                return res.status;
            } else {
                return new Error(String(res.status));
            }
        });
    }

    static async InfoOfUserOrganizationRelationship(): Promise<
        IInfoOfUserOrganizationRelationshipResponse | Error
    > {
        return await fetch(
            `/api/v1/organizations/:organization_id/users/:user_id/organization_roles`,
            {
                method: 'GET',
            },
        ).then(async (res) => {
            if (res.status === 200) {
                return res.json();
            } else {
                return new Error(String(res.status));
            }
        });
    }

    static async ListMembers(): Promise<IListMembersResponse | Error> {
        return await fetch(`/api/v1/organizations/:organization_id/users`, {
            method: 'GET',
        }).then(async (res) => {
            if (res.status === 200) {
                return res.json();
            } else {
                return new Error(String(res.status));
            }
        });
    }

    static async ListOrganizations(): Promise<
        IListOrganizationsResponse | Error
    > {
        return await fetch(`/api/v1/organizations`, {
            method: 'GET',
        }).then(async (res) => {
            if (res.status === 200) {
                return res.json();
            } else {
                return new Error(String(res.status));
            }
        });
    }

    static async ReadOrganizationInfo(): Promise<
        IReadInfoAboutAnOrganizationResponse | Error
    > {
        return await fetch(`/api/v1/organizations/:organization_id`, {
            method: 'GET',
        }).then(async (res) => {
            if (res.status === 200) {
                return res.json();
            } else {
                return new Error(String(res.status));
            }
        });
    }

    static async UpdateOrganization(
        updateanorganizationrequest: IUpdateAnOrganizationRequest,
    ): Promise<IUpdateAnOrganizationResponse | string[] | Error> {
        const haveError: string[] = [];
        const updateanorganizationrequestValid = new UpdateAnOrganizationRequest(
            updateanorganizationrequest,
        );
        haveError.push(...updateanorganizationrequestValid.validate());
        if (haveError.length > 0) {
            return Promise.resolve(haveError);
        }
        return await fetch(`/api/v1/organizations/:organization_id`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updateanorganizationrequestValid.serialize()),
        }).then(async (res) => {
            if (res.status === 200) {
                return res.json();
            } else {
                return new Error(String(res.status));
            }
        });
    }
}
