import CreateAUserRequest, {
    ICreateAUserRequest,
} from '@entities/CreateAUserRequest';
import CreateAUserResponse, {
    ICreateAUserResponse,
} from '@entities/CreateAUserResponse';
import ListUsersResponse, {
    IListUsersResponse,
} from '@entities/ListUsersResponse';
import ReadInfoAboutAUserResponse, {
    IReadInfoAboutAUserResponse,
} from '@entities/ReadInfoAboutAUserResponse';
import UpdateAUserRequest, {
    IUpdateAUserRequest,
} from '@entities/UpdateAUserRequest';
import UpdateAUserResponse, {
    IUpdateAUserResponse,
} from '@entities/UpdateAUserResponse';

// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export default class UserApi {
    static async CreateUser(
        createauserrequest: ICreateAUserRequest,
    ): Promise<ICreateAUserResponse | string[] | Error> {
        const haveError: string[] = [];
        const createauserrequestValid = new CreateAUserRequest(
            createauserrequest,
        );
        haveError.push(...createauserrequestValid.validate());
        if (haveError.length > 0) {
            return Promise.resolve(haveError);
        }
        return await fetch(`/api/v1/users`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(createauserrequestValid.serialize()),
        }).then(async (res) => {
            if (res.status === 200) {
                return res.json();
            } else {
                return new Error(String(res.status));
            }
        });
    }

    static async DeleteUser(): Promise<number | Error> {
        return await fetch(`/api/v1/users/:user_id`, {
            method: 'DELETE',
        }).then(async (res) => {
            if (res.status === 200) {
                return res.status;
            } else {
                return new Error(String(res.status));
            }
        });
    }

    static async ListUsers(): Promise<IListUsersResponse | Error> {
        return await fetch(`/api/v1/users`, {
            method: 'GET',
        }).then(async (res) => {
            if (res.status === 200) {
                return res.json();
            } else {
                return new Error(String(res.status));
            }
        });
    }

    static async ReadUserInfo(): Promise<IReadInfoAboutAUserResponse | Error> {
        return await fetch(`/api/v1/users/:user_id`, {
            method: 'GET',
        }).then(async (res) => {
            if (res.status === 200) {
                return res.json();
            } else {
                return new Error(String(res.status));
            }
        });
    }

    static async UpdateUser(
        updateauserrequest: IUpdateAUserRequest,
    ): Promise<IUpdateAUserResponse | string[] | Error> {
        const haveError: string[] = [];
        const updateauserrequestValid = new UpdateAUserRequest(
            updateauserrequest,
        );
        haveError.push(...updateauserrequestValid.validate());
        if (haveError.length > 0) {
            return Promise.resolve(haveError);
        }
        return await fetch(`/api/v1/users/:user_id`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updateauserrequestValid.serialize()),
        }).then(async (res) => {
            if (res.status === 200) {
                return res.json();
            } else {
                return new Error(String(res.status));
            }
        });
    }
}
