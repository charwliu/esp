// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IAddTrustedApplicationResponse {
    oauth_client_id: string;
    trusted_oauth_client_id: string;
}

export default class AddTrustedApplicationResponse {
    readonly _oauth_client_id: string;

    get oauthClientId(): string {
        return this._oauth_client_id;
    }

    static oauthClientIdValidate(oauthClientId: string): boolean {
        return typeof oauthClientId === 'string' && !!oauthClientId.trim();
    }

    readonly _trusted_oauth_client_id: string;

    get trustedOauthClientId(): string {
        return this._trusted_oauth_client_id;
    }

    static trustedOauthClientIdValidate(trustedOauthClientId: string): boolean {
        return (
            typeof trustedOauthClientId === 'string' &&
            !!trustedOauthClientId.trim()
        );
    }

    constructor(props: IAddTrustedApplicationResponse) {
        this._oauth_client_id = props.oauth_client_id.trim();
        this._trusted_oauth_client_id = props.trusted_oauth_client_id.trim();
    }

    serialize(): IAddTrustedApplicationResponse {
        const data: IAddTrustedApplicationResponse = {
            oauth_client_id: this._oauth_client_id,
            trusted_oauth_client_id: this._trusted_oauth_client_id,
        };
        return data;
    }

    validate(): string[] {
        const validate = {
            oauth_client_id:
                typeof this._oauth_client_id === 'string' &&
                !this._oauth_client_id
                    ? true
                    : this._oauth_client_id,
            trusted_oauth_client_id:
                typeof this._trusted_oauth_client_id === 'string' &&
                !this._trusted_oauth_client_id
                    ? true
                    : this._trusted_oauth_client_id,
        };
        const isError: string[] = [];
        Object.keys(validate).forEach((key) => {
            if (!(validate as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(
        props: Partial<IAddTrustedApplicationResponse>,
    ): AddTrustedApplicationResponse {
        return new AddTrustedApplicationResponse({
            ...this.serialize(),
            ...props,
        });
    }
}
