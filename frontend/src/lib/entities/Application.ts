// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IApplication {
    client_type?: string;
    description?: string;
    grant_type?: string;
    id?: string;
    image?: string;
    name?: string;
    redirect_uri?: string;
    response_type?: string;
    url?: string;
}

export default class Application {
    readonly _client_type: string | undefined;

    get clientType(): string | undefined {
        return this._client_type;
    }

    readonly _description: string | undefined;

    get description(): string | undefined {
        return this._description;
    }

    readonly _grant_type: string | undefined;

    get grantType(): string | undefined {
        return this._grant_type;
    }

    readonly _id: string | undefined;

    get id(): string | undefined {
        return this._id;
    }

    readonly _image: string | undefined;

    get image(): string | undefined {
        return this._image;
    }

    readonly _name: string | undefined;

    get name(): string | undefined {
        return this._name;
    }

    readonly _redirect_uri: string | undefined;

    get redirectUri(): string | undefined {
        return this._redirect_uri;
    }

    readonly _response_type: string | undefined;

    get responseType(): string | undefined {
        return this._response_type;
    }

    readonly _url: string | undefined;

    get url(): string | undefined {
        return this._url;
    }

    constructor(props: IApplication) {
        if (typeof props.client_type === 'string') {
            this._client_type = props.client_type.trim();
        }
        if (typeof props.description === 'string') {
            this._description = props.description.trim();
        }
        if (typeof props.grant_type === 'string') {
            this._grant_type = props.grant_type.trim();
        }
        if (typeof props.id === 'string') {
            this._id = props.id.trim();
        }
        if (typeof props.image === 'string') {
            this._image = props.image.trim();
        }
        if (typeof props.name === 'string') {
            this._name = props.name.trim();
        }
        if (typeof props.redirect_uri === 'string') {
            this._redirect_uri = props.redirect_uri.trim();
        }
        if (typeof props.response_type === 'string') {
            this._response_type = props.response_type.trim();
        }
        if (typeof props.url === 'string') {
            this._url = props.url.trim();
        }
    }

    serialize(): IApplication {
        const data: IApplication = {};
        if (typeof this._client_type !== 'undefined') {
            data.client_type = this._client_type;
        }
        if (typeof this._description !== 'undefined') {
            data.description = this._description;
        }
        if (typeof this._grant_type !== 'undefined') {
            data.grant_type = this._grant_type;
        }
        if (typeof this._id !== 'undefined') {
            data.id = this._id;
        }
        if (typeof this._image !== 'undefined') {
            data.image = this._image;
        }
        if (typeof this._name !== 'undefined') {
            data.name = this._name;
        }
        if (typeof this._redirect_uri !== 'undefined') {
            data.redirect_uri = this._redirect_uri;
        }
        if (typeof this._response_type !== 'undefined') {
            data.response_type = this._response_type;
        }
        if (typeof this._url !== 'undefined') {
            data.url = this._url;
        }
        return data;
    }

    validate(): string[] {
        const validate = {
            id: !this._id
                ? true
                : typeof this._id === 'string' && !this._id
                ? true
                : this._id,
            name: !this._name
                ? true
                : typeof this._name === 'string' && !this._name
                ? true
                : this._name,
            description: !this._description
                ? true
                : typeof this._description === 'string' && !this._description
                ? true
                : this._description,
            image: !this._image
                ? true
                : typeof this._image === 'string' && !this._image
                ? true
                : this._image,
            url: !this._url
                ? true
                : typeof this._url === 'string' && !this._url
                ? true
                : this._url,
            redirect_uri: !this._redirect_uri
                ? true
                : typeof this._redirect_uri === 'string' && !this._redirect_uri
                ? true
                : this._redirect_uri,
            grant_type: !this._grant_type
                ? true
                : typeof this._grant_type === 'string' && !this._grant_type
                ? true
                : this._grant_type,
            response_type: !this._response_type
                ? true
                : typeof this._response_type === 'string' &&
                  !this._response_type
                ? true
                : this._response_type,
            client_type: !this._client_type
                ? true
                : typeof this._client_type === 'string' && !this._client_type
                ? true
                : this._client_type,
        };
        const isError: string[] = [];
        Object.keys(validate).forEach((key) => {
            if (!(validate as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: Partial<IApplication>): Application {
        return new Application({...this.serialize(), ...props});
    }
}
