import PepProxy, {IPepProxy} from './PepProxy';

// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IInfoPepProxyResponse {
    pep_proxy: IPepProxy;
}

export default class InfoPepProxyResponse {
    readonly _pep_proxy: PepProxy;

    get pepProxy(): PepProxy {
        return this._pep_proxy;
    }

    constructor(props: IInfoPepProxyResponse) {
        this._pep_proxy = new PepProxy(props.pep_proxy);
    }

    serialize(): IInfoPepProxyResponse {
        const data: IInfoPepProxyResponse = {
            pep_proxy: this._pep_proxy.serialize(),
        };
        return data;
    }

    validate(): string[] {
        const validate = {
            pep_proxy: this._pep_proxy.validate().length === 0,
        };
        const isError: string[] = [];
        Object.keys(validate).forEach((key) => {
            if (!(validate as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: Partial<IInfoPepProxyResponse>): InfoPepProxyResponse {
        return new InfoPepProxyResponse({...this.serialize(), ...props});
    }
}
