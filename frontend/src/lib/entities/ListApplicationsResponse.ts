import Application, {IApplication} from './Application';

// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IListApplicationsResponse {
    applications: IApplication[];
}

export default class ListApplicationsResponse {
    readonly _applications: Application[];

    get applications(): Application[] {
        return this._applications;
    }

    constructor(props: IListApplicationsResponse) {
        this._applications = props.applications.map((p) => new Application(p));
    }

    serialize(): IListApplicationsResponse {
        const data: IListApplicationsResponse = {
            applications: this._applications.map((p) => p.serialize()),
        };
        return data;
    }

    validate(): string[] {
        const validate = {
            applications: this._applications.reduce(
                (result, p) => result && p.validate().length === 0,
                true,
            ),
        };
        const isError: string[] = [];
        Object.keys(validate).forEach((key) => {
            if (!(validate as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(
        props: Partial<IListApplicationsResponse>,
    ): ListApplicationsResponse {
        return new ListApplicationsResponse({...this.serialize(), ...props});
    }
}
