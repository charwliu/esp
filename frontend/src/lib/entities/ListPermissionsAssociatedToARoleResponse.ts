import Permission, {IPermission} from './Permission';

// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IListPermissionsAssociatedToARoleResponse {
    role_permission_assignments: IPermission[];
}

export default class ListPermissionsAssociatedToARoleResponse {
    readonly _role_permission_assignments: Permission[];

    get rolePermissionAssignments(): Permission[] {
        return this._role_permission_assignments;
    }

    constructor(props: IListPermissionsAssociatedToARoleResponse) {
        this._role_permission_assignments = props.role_permission_assignments.map(
            (p) => new Permission(p),
        );
    }

    serialize(): IListPermissionsAssociatedToARoleResponse {
        const data: IListPermissionsAssociatedToARoleResponse = {
            role_permission_assignments: this._role_permission_assignments.map(
                (p) => p.serialize(),
            ),
        };
        return data;
    }

    validate(): string[] {
        const validate = {
            role_permission_assignments: this._role_permission_assignments.reduce(
                (result, p) => result && p.validate().length === 0,
                true,
            ),
        };
        const isError: string[] = [];
        Object.keys(validate).forEach((key) => {
            if (!(validate as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(
        props: Partial<IListPermissionsAssociatedToARoleResponse>,
    ): ListPermissionsAssociatedToARoleResponse {
        return new ListPermissionsAssociatedToARoleResponse({
            ...this.serialize(),
            ...props,
        });
    }
}
