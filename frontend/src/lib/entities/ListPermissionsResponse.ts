import Permission, {IPermission} from './Permission';

// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IListPermissionsResponse {
    permissions: IPermission[];
}

export default class ListPermissionsResponse {
    readonly _permissions: Permission[];

    get permissions(): Permission[] {
        return this._permissions;
    }

    constructor(props: IListPermissionsResponse) {
        this._permissions = props.permissions.map((p) => new Permission(p));
    }

    serialize(): IListPermissionsResponse {
        const data: IListPermissionsResponse = {
            permissions: this._permissions.map((p) => p.serialize()),
        };
        return data;
    }

    validate(): string[] {
        const validate = {
            permissions: this._permissions.reduce(
                (result, p) => result && p.validate().length === 0,
                true,
            ),
        };
        const isError: string[] = [];
        Object.keys(validate).forEach((key) => {
            if (!(validate as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: Partial<IListPermissionsResponse>): ListPermissionsResponse {
        return new ListPermissionsResponse({...this.serialize(), ...props});
    }
}
