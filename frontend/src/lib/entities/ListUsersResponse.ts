import User, {IUser} from './User';

// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IListUsersResponse {
    users: IUser[];
}

export default class ListUsersResponse {
    readonly _users: User[];

    get users(): User[] {
        return this._users;
    }

    constructor(props: IListUsersResponse) {
        this._users = props.users.map((p) => new User(p));
    }

    serialize(): IListUsersResponse {
        const data: IListUsersResponse = {
            users: this._users.map((p) => p.serialize()),
        };
        return data;
    }

    validate(): string[] {
        const validate = {
            users: this._users.reduce(
                (result, p) => result && p.validate().length === 0,
                true,
            ),
        };
        const isError: string[] = [];
        Object.keys(validate).forEach((key) => {
            if (!(validate as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: Partial<IListUsersResponse>): ListUsersResponse {
        return new ListUsersResponse({...this.serialize(), ...props});
    }
}
