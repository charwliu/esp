// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IOrganizationUser {
    organization_id?: string;
    role?: string;
    user_id?: string;
}

export default class OrganizationUser {
    readonly _organization_id: string | undefined;

    get organizationId(): string | undefined {
        return this._organization_id;
    }

    readonly _role: string | undefined;

    get role(): string | undefined {
        return this._role;
    }

    readonly _user_id: string | undefined;

    get userId(): string | undefined {
        return this._user_id;
    }

    constructor(props: IOrganizationUser) {
        if (typeof props.organization_id === 'string') {
            this._organization_id = props.organization_id.trim();
        }
        if (typeof props.role === 'string') {
            this._role = props.role.trim();
        }
        if (typeof props.user_id === 'string') {
            this._user_id = props.user_id.trim();
        }
    }

    serialize(): IOrganizationUser {
        const data: IOrganizationUser = {};
        if (typeof this._organization_id !== 'undefined') {
            data.organization_id = this._organization_id;
        }
        if (typeof this._role !== 'undefined') {
            data.role = this._role;
        }
        if (typeof this._user_id !== 'undefined') {
            data.user_id = this._user_id;
        }
        return data;
    }

    validate(): string[] {
        const validate = {
            user_id: !this._user_id
                ? true
                : typeof this._user_id === 'string' && !this._user_id
                ? true
                : this._user_id,
            organization_id: !this._organization_id
                ? true
                : typeof this._organization_id === 'string' &&
                  !this._organization_id
                ? true
                : this._organization_id,
            role: !this._role
                ? true
                : typeof this._role === 'string' && !this._role
                ? true
                : this._role,
        };
        const isError: string[] = [];
        Object.keys(validate).forEach((key) => {
            if (!(validate as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: Partial<IOrganizationUser>): OrganizationUser {
        return new OrganizationUser({...this.serialize(), ...props});
    }
}
