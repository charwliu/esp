// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IPermission {
    description?: string;
    id?: string;
    is_internal?: boolean;
    name?: string;
    xml?: string;
}

export default class Permission {
    readonly _description: string | undefined;

    get description(): string | undefined {
        return this._description;
    }

    readonly _id: string | undefined;

    get id(): string | undefined {
        return this._id;
    }

    readonly _is_internal: boolean | undefined;

    get isInternal(): boolean | undefined {
        return this._is_internal;
    }

    readonly _name: string | undefined;

    get name(): string | undefined {
        return this._name;
    }

    readonly _xml: string | undefined;

    get xml(): string | undefined {
        return this._xml;
    }

    constructor(props: IPermission) {
        if (typeof props.description === 'string') {
            this._description = props.description.trim();
        }
        if (typeof props.id === 'string') {
            this._id = props.id.trim();
        }
        if (typeof props.is_internal === 'boolean') {
            this._is_internal = props.is_internal;
        }
        if (typeof props.name === 'string') {
            this._name = props.name.trim();
        }
        if (typeof props.xml === 'string') {
            this._xml = props.xml.trim();
        }
    }

    serialize(): IPermission {
        const data: IPermission = {};
        if (typeof this._description !== 'undefined') {
            data.description = this._description;
        }
        if (typeof this._id !== 'undefined') {
            data.id = this._id;
        }
        if (typeof this._is_internal !== 'undefined') {
            data.is_internal = this._is_internal;
        }
        if (typeof this._name !== 'undefined') {
            data.name = this._name;
        }
        if (typeof this._xml !== 'undefined') {
            data.xml = this._xml;
        }
        return data;
    }

    validate(): string[] {
        const validate = {
            id: !this._id
                ? true
                : typeof this._id === 'string' && !this._id
                ? true
                : this._id,
            is_internal: !this._is_internal
                ? true
                : typeof this._is_internal === 'boolean',
            name: !this._name
                ? true
                : typeof this._name === 'string' && !this._name
                ? true
                : this._name,
            description: !this._description
                ? true
                : typeof this._description === 'string' && !this._description
                ? true
                : this._description,
            xml: !this._xml
                ? true
                : typeof this._xml === 'string' && !this._xml
                ? true
                : this._xml,
        };
        const isError: string[] = [];
        Object.keys(validate).forEach((key) => {
            if (!(validate as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: Partial<IPermission>): Permission {
        return new Permission({...this.serialize(), ...props});
    }
}
