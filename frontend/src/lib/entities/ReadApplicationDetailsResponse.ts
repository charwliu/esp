import Application, {IApplication} from './Application';

// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IReadApplicationDetailsResponse {
    application: IApplication;
}

export default class ReadApplicationDetailsResponse {
    readonly _application: Application;

    get application(): Application {
        return this._application;
    }

    constructor(props: IReadApplicationDetailsResponse) {
        this._application = new Application(props.application);
    }

    serialize(): IReadApplicationDetailsResponse {
        const data: IReadApplicationDetailsResponse = {
            application: this._application.serialize(),
        };
        return data;
    }

    validate(): string[] {
        const validate = {
            application: this._application.validate().length === 0,
        };
        const isError: string[] = [];
        Object.keys(validate).forEach((key) => {
            if (!(validate as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(
        props: Partial<IReadApplicationDetailsResponse>,
    ): ReadApplicationDetailsResponse {
        return new ReadApplicationDetailsResponse({
            ...this.serialize(),
            ...props,
        });
    }
}
