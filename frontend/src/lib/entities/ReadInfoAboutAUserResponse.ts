import User, {IUser} from './User';

// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IReadInfoAboutAUserResponse {
    user: IUser;
}

export default class ReadInfoAboutAUserResponse {
    readonly _user: User;

    get user(): User {
        return this._user;
    }

    constructor(props: IReadInfoAboutAUserResponse) {
        this._user = new User(props.user);
    }

    serialize(): IReadInfoAboutAUserResponse {
        const data: IReadInfoAboutAUserResponse = {
            user: this._user.serialize(),
        };
        return data;
    }

    validate(): string[] {
        const validate = {
            user: this._user.validate().length === 0,
        };
        const isError: string[] = [];
        Object.keys(validate).forEach((key) => {
            if (!(validate as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(
        props: Partial<IReadInfoAboutAUserResponse>,
    ): ReadInfoAboutAUserResponse {
        return new ReadInfoAboutAUserResponse({...this.serialize(), ...props});
    }
}
