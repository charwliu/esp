import User, {IUser} from './User';

// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IUpdateAUserResponse {
    values_updated: IUser;
}

export default class UpdateAUserResponse {
    readonly _values_updated: User;

    get valuesUpdated(): User {
        return this._values_updated;
    }

    constructor(props: IUpdateAUserResponse) {
        this._values_updated = new User(props.values_updated);
    }

    serialize(): IUpdateAUserResponse {
        const data: IUpdateAUserResponse = {
            values_updated: this._values_updated.serialize(),
        };
        return data;
    }

    validate(): string[] {
        const validate = {
            values_updated: this._values_updated.validate().length === 0,
        };
        const isError: string[] = [];
        Object.keys(validate).forEach((key) => {
            if (!(validate as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: Partial<IUpdateAUserResponse>): UpdateAUserResponse {
        return new UpdateAUserResponse({...this.serialize(), ...props});
    }
}
