import Organization, {IOrganization} from './Organization';

// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IUpdateAnOrganizationResponse {
    values_updated: IOrganization;
}

export default class UpdateAnOrganizationResponse {
    readonly _values_updated: Organization;

    get valuesUpdated(): Organization {
        return this._values_updated;
    }

    constructor(props: IUpdateAnOrganizationResponse) {
        this._values_updated = new Organization(props.values_updated);
    }

    serialize(): IUpdateAnOrganizationResponse {
        const data: IUpdateAnOrganizationResponse = {
            values_updated: this._values_updated.serialize(),
        };
        return data;
    }

    validate(): string[] {
        const validate = {
            values_updated: this._values_updated.validate().length === 0,
        };
        const isError: string[] = [];
        Object.keys(validate).forEach((key) => {
            if (!(validate as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(
        props: Partial<IUpdateAnOrganizationResponse>,
    ): UpdateAnOrganizationResponse {
        return new UpdateAnOrganizationResponse({
            ...this.serialize(),
            ...props,
        });
    }
}
