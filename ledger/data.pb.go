// -*- mode: protobuf -*-
//
// A schema for Beancount's fully booked stream of directives. These are the
// definitions of the API and main artifact produced by the Beancount core, a
// stream of directives.
//
// Note: Unlike in Beancount 2.x, the messages representing the intermediate
// parsed state (the AST) are defined and located elsewhere.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: ledger/data.proto

package ledger

import (
	options "go.vixal.xyz/esp/ledger/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Container for account types.
// TODO(blais): Reconcile with Options and code library.
type AccountTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets      *string `protobuf:"bytes,1,opt,name=assets,proto3,oneof" json:"assets,omitempty"`
	Liabilities *string `protobuf:"bytes,2,opt,name=liabilities,proto3,oneof" json:"liabilities,omitempty"`
	Equity      *string `protobuf:"bytes,3,opt,name=equity,proto3,oneof" json:"equity,omitempty"`
	Income      *string `protobuf:"bytes,4,opt,name=income,proto3,oneof" json:"income,omitempty"`
	Expenses    *string `protobuf:"bytes,5,opt,name=expenses,proto3,oneof" json:"expenses,omitempty"`
}

func (x *AccountTypes) Reset() {
	*x = AccountTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTypes) ProtoMessage() {}

func (x *AccountTypes) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTypes.ProtoReflect.Descriptor instead.
func (*AccountTypes) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{0}
}

func (x *AccountTypes) GetAssets() string {
	if x != nil && x.Assets != nil {
		return *x.Assets
	}
	return ""
}

func (x *AccountTypes) GetLiabilities() string {
	if x != nil && x.Liabilities != nil {
		return *x.Liabilities
	}
	return ""
}

func (x *AccountTypes) GetEquity() string {
	if x != nil && x.Equity != nil {
		return *x.Equity
	}
	return ""
}

func (x *AccountTypes) GetIncome() string {
	if x != nil && x.Income != nil {
		return *x.Income
	}
	return ""
}

func (x *AccountTypes) GetExpenses() string {
	if x != nil && x.Expenses != nil {
		return *x.Expenses
	}
	return ""
}

// A metadata value. This is a simple general variant type intended to keep the
// values of the metadata key-value pairs.
type MetaValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*MetaValue_Text
	//	*MetaValue_Account
	//	*MetaValue_Currency
	//	*MetaValue_Tag
	//	*MetaValue_Link
	//	*MetaValue_Flag
	//	*MetaValue_Date
	//	*MetaValue_Boolean
	//	*MetaValue_Integer
	//	*MetaValue_Number
	//	*MetaValue_Amount
	Value isMetaValue_Value `protobuf_oneof:"value"`
}

func (x *MetaValue) Reset() {
	*x = MetaValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaValue) ProtoMessage() {}

func (x *MetaValue) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaValue.ProtoReflect.Descriptor instead.
func (*MetaValue) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{1}
}

func (m *MetaValue) GetValue() isMetaValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *MetaValue) GetText() string {
	if x, ok := x.GetValue().(*MetaValue_Text); ok {
		return x.Text
	}
	return ""
}

func (x *MetaValue) GetAccount() string {
	if x, ok := x.GetValue().(*MetaValue_Account); ok {
		return x.Account
	}
	return ""
}

func (x *MetaValue) GetCurrency() string {
	if x, ok := x.GetValue().(*MetaValue_Currency); ok {
		return x.Currency
	}
	return ""
}

func (x *MetaValue) GetTag() string {
	if x, ok := x.GetValue().(*MetaValue_Tag); ok {
		return x.Tag
	}
	return ""
}

func (x *MetaValue) GetLink() string {
	if x, ok := x.GetValue().(*MetaValue_Link); ok {
		return x.Link
	}
	return ""
}

func (x *MetaValue) GetFlag() string {
	if x, ok := x.GetValue().(*MetaValue_Flag); ok {
		return x.Flag
	}
	return ""
}

func (x *MetaValue) GetDate() *Date {
	if x, ok := x.GetValue().(*MetaValue_Date); ok {
		return x.Date
	}
	return nil
}

func (x *MetaValue) GetBoolean() bool {
	if x, ok := x.GetValue().(*MetaValue_Boolean); ok {
		return x.Boolean
	}
	return false
}

func (x *MetaValue) GetInteger() int64 {
	if x, ok := x.GetValue().(*MetaValue_Integer); ok {
		return x.Integer
	}
	return 0
}

func (x *MetaValue) GetNumber() *Number {
	if x, ok := x.GetValue().(*MetaValue_Number); ok {
		return x.Number
	}
	return nil
}

func (x *MetaValue) GetAmount() *Amount {
	if x, ok := x.GetValue().(*MetaValue_Amount); ok {
		return x.Amount
	}
	return nil
}

type isMetaValue_Value interface {
	isMetaValue_Value()
}

type MetaValue_Text struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type MetaValue_Account struct {
	Account string `protobuf:"bytes,2,opt,name=account,proto3,oneof"`
}

type MetaValue_Currency struct {
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3,oneof"`
}

type MetaValue_Tag struct {
	Tag string `protobuf:"bytes,4,opt,name=tag,proto3,oneof"`
}

type MetaValue_Link struct {
	Link string `protobuf:"bytes,5,opt,name=link,proto3,oneof"`
}

type MetaValue_Flag struct {
	Flag string `protobuf:"bytes,6,opt,name=flag,proto3,oneof"`
}

type MetaValue_Date struct {
	Date *Date `protobuf:"bytes,7,opt,name=date,proto3,oneof"`
}

type MetaValue_Boolean struct {
	Boolean bool `protobuf:"varint,8,opt,name=boolean,proto3,oneof"`
}

type MetaValue_Integer struct {
	Integer int64 `protobuf:"varint,9,opt,name=integer,proto3,oneof"`
}

type MetaValue_Number struct {
	Number *Number `protobuf:"bytes,10,opt,name=number,proto3,oneof"`
}

type MetaValue_Amount struct {
	Amount *Amount `protobuf:"bytes,11,opt,name=amount,proto3,oneof"`
}

func (*MetaValue_Text) isMetaValue_Value() {}

func (*MetaValue_Account) isMetaValue_Value() {}

func (*MetaValue_Currency) isMetaValue_Value() {}

func (*MetaValue_Tag) isMetaValue_Value() {}

func (*MetaValue_Link) isMetaValue_Value() {}

func (*MetaValue_Flag) isMetaValue_Value() {}

func (*MetaValue_Date) isMetaValue_Value() {}

func (*MetaValue_Boolean) isMetaValue_Value() {}

func (*MetaValue_Integer) isMetaValue_Value() {}

func (*MetaValue_Number) isMetaValue_Value() {}

func (*MetaValue_Amount) isMetaValue_Value() {}

// A metadata dictionary, or key-value pairs.
type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kv []*Meta_KV `protobuf:"bytes,1,rep,name=kv,proto3" json:"kv,omitempty"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{2}
}

func (x *Meta) GetKv() []*Meta_KV {
	if x != nil {
		return x.Kv
	}
	return nil
}

// An 'Amount' represents a number of a particular unit of something. It's
// essentially a typed number, with corresponding manipulation operations
// defined on it.
type Amount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number   *Number `protobuf:"bytes,1,opt,name=number,proto3,oneof" json:"number,omitempty"`
	Currency *string `protobuf:"bytes,2,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
}

func (x *Amount) Reset() {
	*x = Amount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Amount) ProtoMessage() {}

func (x *Amount) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Amount.ProtoReflect.Descriptor instead.
func (*Amount) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{3}
}

func (x *Amount) GetNumber() *Number {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *Amount) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

// A variant of Amount that also includes a date and a label.
type Cost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A decimal number, the per-unit cost.
	Number *Number `protobuf:"bytes,1,opt,name=number,proto3,oneof" json:"number,omitempty"`
	// A string, the cost currency.
	Currency *string `protobuf:"bytes,2,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	// A datetime.date for the date that the lot was created at. There should
	// always be a valid date.
	Date *Date `protobuf:"bytes,3,opt,name=date,proto3,oneof" json:"date,omitempty"`
	// A string for the label of this lot, or None, if there is no label.
	Label *string `protobuf:"bytes,4,opt,name=label,proto3,oneof" json:"label,omitempty"`
}

func (x *Cost) Reset() {
	*x = Cost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cost) ProtoMessage() {}

func (x *Cost) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cost.ProtoReflect.Descriptor instead.
func (*Cost) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{4}
}

func (x *Cost) GetNumber() *Number {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *Cost) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *Cost) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Cost) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

// A Position is a pair of units and optional cost. This is used to represent
// lots accumulated over time in inventories, and the impact of posting on an
// inventory is also a position. It is synonymous with a "lot."
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An Amount, the number of units and its currency.
	Units *Amount `protobuf:"bytes,1,opt,name=units,proto3,oneof" json:"units,omitempty"`
	// An optional Cost that stores the cost basis and lot identification.
	Cost *Cost `protobuf:"bytes,2,opt,name=cost,proto3,oneof" json:"cost,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{5}
}

func (x *Position) GetUnits() *Amount {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *Position) GetCost() *Cost {
	if x != nil {
		return x.Cost
	}
	return nil
}

// Postings are contained in Transaction entries. These represent the individual
// legs of a transaction. Note: a posting may only appear within a single entry
// (multiple transactions may not share a Posting instance), and that's what the
// entry field should be set to.
type Posting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Location of the posting.
	Location *Location `protobuf:"bytes,1,opt,name=location,proto3,oneof" json:"location,omitempty"`
	// A dict of strings to values, the metadata that was attached specifically to
	// that posting, or None, if not provided. In practice, most of the instances
	// will be unlikely to have metadata.
	Meta *Meta `protobuf:"bytes,2,opt,name=meta,proto3,oneof" json:"meta,omitempty"`
	// Optional posting date.
	Date *Date `protobuf:"bytes,3,opt,name=date,proto3,oneof" json:"date,omitempty"`
	// An optional flag, a one-character string or None, which is to be associated
	// with the posting. Most postings don't have a flag, but it can be convenient
	// to mark a particular posting as problematic or pending to be reconciled for
	// a future import of its account.
	Flag []byte `protobuf:"bytes,4,opt,name=flag,proto3,oneof" json:"flag,omitempty"`
	// A string, the account that is modified by this posting.
	Account string `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	// The position this posting impacts on its inventory.
	Position *Position `protobuf:"bytes,6,opt,name=position,proto3,oneof" json:"position,omitempty"`
	// An Amount, the price at which the position took place, or None, where not
	// relevant. Providing a price member to a posting automatically adds a price
	// in the prices database at the date of the transaction.
	Price *Amount `protobuf:"bytes,7,opt,name=price,proto3,oneof" json:"price,omitempty"`
	// WARNING: The following fields is only used in the production of the
	// intermediate representation produced by the parser and never set in the
	// final processed output from Beancount. This is never set in the finalized
	// interpolated and booked data.
	Spec *Spec `protobuf:"bytes,8,opt,name=spec,proto3,oneof" json:"spec,omitempty"`
}

func (x *Posting) Reset() {
	*x = Posting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Posting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Posting) ProtoMessage() {}

func (x *Posting) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Posting.ProtoReflect.Descriptor instead.
func (*Posting) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{6}
}

func (x *Posting) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Posting) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Posting) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Posting) GetFlag() []byte {
	if x != nil {
		return x.Flag
	}
	return nil
}

func (x *Posting) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Posting) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Posting) GetPrice() *Amount {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Posting) GetSpec() *Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// A pair of a Posting and its parent Transaction. This is inserted as
// temporaries in lists of postings-of-entries, which is the product of a
// realization.
type TxnPosting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txn     *Transaction `protobuf:"bytes,1,opt,name=txn,proto3,oneof" json:"txn,omitempty"`
	Posting *Posting     `protobuf:"bytes,2,opt,name=posting,proto3,oneof" json:"posting,omitempty"`
}

func (x *TxnPosting) Reset() {
	*x = TxnPosting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxnPosting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxnPosting) ProtoMessage() {}

func (x *TxnPosting) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxnPosting.ProtoReflect.Descriptor instead.
func (*TxnPosting) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{7}
}

func (x *TxnPosting) GetTxn() *Transaction {
	if x != nil {
		return x.Txn
	}
	return nil
}

func (x *TxnPosting) GetPosting() *Posting {
	if x != nil {
		return x.Posting
	}
	return nil
}

// A transaction! This is the main type of object that we manipulate, and the
// entire reason this whole project exists in the first place, because
// representing these types of structures with a spreadsheet is difficult.
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A single-character string or None. This user-specified string represents
	// some custom/user-defined state of the transaction. You can use this for
	// various purposes. Otherwise common, pre-defined flags are defined under
	// beancount.core.flags, to flags transactions that are automatically
	// generated.
	Flag []byte `protobuf:"bytes,3,opt,name=flag,proto3,oneof" json:"flag,omitempty"`
	// A free-form string that identifies the payee, or None, if absent.
	Payee *string `protobuf:"bytes,4,opt,name=payee,proto3,oneof" json:"payee,omitempty"`
	// A free-form string that provides a description for the transaction. All
	// transactions have at least a narration string, this is never None.
	Narration *string `protobuf:"bytes,5,opt,name=narration,proto3,oneof" json:"narration,omitempty"`
	// A list of Posting instances, the legs of this transaction. See the
	// doc under Posting above.
	Postings []*Posting `protobuf:"bytes,8,rep,name=postings,proto3" json:"postings,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{8}
}

func (x *Transaction) GetFlag() []byte {
	if x != nil {
		return x.Flag
	}
	return nil
}

func (x *Transaction) GetPayee() string {
	if x != nil && x.Payee != nil {
		return *x.Payee
	}
	return ""
}

func (x *Transaction) GetNarration() string {
	if x != nil && x.Narration != nil {
		return *x.Narration
	}
	return ""
}

func (x *Transaction) GetPostings() []*Posting {
	if x != nil {
		return x.Postings
	}
	return nil
}

// An "open account" directive.
type Open struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A string, the name of the account that is being opened.
	Account *string `protobuf:"bytes,3,opt,name=account,proto3,oneof" json:"account,omitempty"`
	// A list of strings, currencies that are allowed in this account. May be
	// None, in which case it means that there are no restrictions on which
	// currencies may be stored in this account.
	Currencies []string `protobuf:"bytes,4,rep,name=currencies,proto3" json:"currencies,omitempty"`
	// A Booking enum, the booking method to use to disambiguate postings to this
	// account (when zero or more than one postings match the specification), or
	// None if not specified. In practice, this attribute will be should be left
	// unspecified (None) in the vast majority of cases. See Booking below for a
	// selection of valid methods.
	Booking *options.Booking `protobuf:"varint,5,opt,name=booking,proto3,enum=options.Booking,oneof" json:"booking,omitempty"`
}

func (x *Open) Reset() {
	*x = Open{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Open) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Open) ProtoMessage() {}

func (x *Open) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Open.ProtoReflect.Descriptor instead.
func (*Open) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{9}
}

func (x *Open) GetAccount() string {
	if x != nil && x.Account != nil {
		return *x.Account
	}
	return ""
}

func (x *Open) GetCurrencies() []string {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *Open) GetBooking() options.Booking {
	if x != nil && x.Booking != nil {
		return *x.Booking
	}
	return options.Booking_UNKNOWN
}

// A "close account" directive.
type Close struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A string, the name of the account that is being closed.
	Account *string `protobuf:"bytes,3,opt,name=account,proto3,oneof" json:"account,omitempty"`
}

func (x *Close) Reset() {
	*x = Close{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Close) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Close) ProtoMessage() {}

func (x *Close) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Close.ProtoReflect.Descriptor instead.
func (*Close) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{10}
}

func (x *Close) GetAccount() string {
	if x != nil && x.Account != nil {
		return *x.Account
	}
	return ""
}

// An optional commodity declaration directive. Commodities generally do not
// need to be declared, but they may, and this is mainly created as intended to
// be used to attach meta-data on a commodity name. Whenever a plugin needs
// per-commodity meta-data, you would define such a commodity directive. Another
// use is to define a commodity that isn't otherwise (yet) used anywhere in an
// input file. (At the moment the date is meaningless but is specified for
// coherence with all the other directives; if you can think of a good use case,
// let us know).
type Commodity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A string, the commodity under consideration.
	Currency *string `protobuf:"bytes,3,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
}

func (x *Commodity) Reset() {
	*x = Commodity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commodity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commodity) ProtoMessage() {}

func (x *Commodity) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commodity.ProtoReflect.Descriptor instead.
func (*Commodity) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{11}
}

func (x *Commodity) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

// A "pad this account with this other account" directive. This directive
// automatically inserts transactions that will make the next chronological
// balance directive succeeds. It can be used to fill in missing date ranges of
// transactions, as a convenience. You don't have to use this, it's sugar coating
// in case you need it, while you're entering past history into your Ledger.
type Pad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A string, the name of the account which needs to be filled.
	Account *string `protobuf:"bytes,3,opt,name=account,proto3,oneof" json:"account,omitempty"`
	// A string, the name of the account which is used to debit from in order to
	// fill 'account'.
	SourceAccount *string `protobuf:"bytes,4,opt,name=sourceAccount,proto3,oneof" json:"sourceAccount,omitempty"`
}

func (x *Pad) Reset() {
	*x = Pad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pad) ProtoMessage() {}

func (x *Pad) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pad.ProtoReflect.Descriptor instead.
func (*Pad) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{12}
}

func (x *Pad) GetAccount() string {
	if x != nil && x.Account != nil {
		return *x.Account
	}
	return ""
}

func (x *Pad) GetSourceAccount() string {
	if x != nil && x.SourceAccount != nil {
		return *x.SourceAccount
	}
	return ""
}

// A "check the balance of this account" directive. This directive asserts that
// the declared account should have a known number of units of a particular
// currency at the beginning of its date. This is essentially an assertion, and
// corresponds to the final "Statement Balance" line of a real-world statement.
// These assertions act as checkpoints to help ensure that you have entered your
// transactions correctly.
type Balance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A string, the account whose balance to check at the given date.
	Account *string `protobuf:"bytes,3,opt,name=account,proto3,oneof" json:"account,omitempty"`
	// An Amount, the number of units of the given currency you're expecting
	// 'account' to have at this date.
	Amount *Amount `protobuf:"bytes,4,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	// A Decimal object, the amount of tolerance to use in the verification.
	Tolerance *Number `protobuf:"bytes,5,opt,name=tolerance,proto3,oneof" json:"tolerance,omitempty"`
	// None if the balance check succeeds. This value is set to an Amount instance
	// if the balance fails, the amount of the difference.
	DiffAmount *Amount `protobuf:"bytes,6,opt,name=diffAmount,proto3,oneof" json:"diffAmount,omitempty"`
}

func (x *Balance) Reset() {
	*x = Balance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balance) ProtoMessage() {}

func (x *Balance) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balance.ProtoReflect.Descriptor instead.
func (*Balance) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{13}
}

func (x *Balance) GetAccount() string {
	if x != nil && x.Account != nil {
		return *x.Account
	}
	return ""
}

func (x *Balance) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Balance) GetTolerance() *Number {
	if x != nil {
		return x.Tolerance
	}
	return nil
}

func (x *Balance) GetDiffAmount() *Amount {
	if x != nil {
		return x.DiffAmount
	}
	return nil
}

// A note directive, a general note that is attached to an account. These are
// used to attach text at a particular date in a specific account. The notes can
// be anything; a typical use would be to jot down an answer from a phone call
// to the institution represented by the account. It should show up in an
// account's journal. If you don't want this rendered, use the comment syntax in
// the input file, which does not get parsed and stored.
type Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A string, the account which the note is to be attached to. This is never
	// None, notes always have an account they correspond to.
	Account *string `protobuf:"bytes,3,opt,name=account,proto3,oneof" json:"account,omitempty"`
	// A free-form string, the text of the note. This can be long if you want it
	// to.
	Comment *string `protobuf:"bytes,4,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
}

func (x *Note) Reset() {
	*x = Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{14}
}

func (x *Note) GetAccount() string {
	if x != nil && x.Account != nil {
		return *x.Account
	}
	return ""
}

func (x *Note) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

// An "event value change" directive. These directives are used as string
// variables that have different values over time. You can use these to track an
// address, your location, your current employer, anything you like. The kind of
// reporting that is made of these generic events is based on days and a
// timeline. For instance, if you need to track the number of days you spend in
// each country or state, create a "location" event and whenever you travel, add
// an event directive to indicate its new value. You should be able to write
// simple scripts against those in order to compute if you were present
// somewhere for a particular number of days. Here's an illustrative example
// usage, in order to maintain your health insurance coverage in Canada, you
// need to be present in the country for 183 days or more, excluding trips of
// less than 30 days. There is a similar test to be done in the US by aliens to
// figure out if they need to be considered as residents for tax purposes (the
// so-called "substantial presence test"). By integrating these directives into
// your bookkeeping, you can easily have a little program that computes the
// tests for you. This is, of course, entirely optional and somewhat auxiliary
// to the main purpose of double-entry bookkeeping, but correlates strongly with
// the transactions you insert in it, and so it's a really convenient thing to
// have in the same input file.
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A short string, typically a single lowercase word, that defines a unique
	// variable whose value changes over time. For example, 'location'.
	Type *string `protobuf:"bytes,3,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// A free-form string, the value of the variable as of the date of the
	// transaction.
	Description *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{15}
}

func (x *Event) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Event) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

// A named query declaration. This directive is used to create pre-canned
// queries that can then be automatically run or made available to the shell, or
// perhaps be rendered as part of a web interface. The purpose of this routine
// is to define useful queries for the context of the particular given Beancount
// input file.
//
// The date is the date at which this query should be run. All directives
// following this date will be ignored automatically. This is essentially
// equivalent to the CLOSE modifier in the shell syntax.
type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A string, the unique identifier for the query.
	Name *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// The SQL query string to be run or made available.
	QueryString *string `protobuf:"bytes,4,opt,name=query_string,json=queryString,proto3,oneof" json:"query_string,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{16}
}

func (x *Query) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Query) GetQueryString() string {
	if x != nil && x.QueryString != nil {
		return *x.QueryString
	}
	return ""
}

// A price declaration directive. This establishes the price of a currency in
// terms of another currency as of the directive's date. A history of the prices
// for each currency pairs is built and can be queried within the bookkeeping
// system. Note that because Beancount does not store any data at time-of-day
// resolution, it makes no sense to have multiple price directives at the same
// date. (Beancount will not attempt to solve this problem; this is beyond the
// general scope of double-entry bookkeeping and if you need to build a day
// trading system, you should probably use something else).
type Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A string, the currency that is being priced, e.g. HOOL.
	Currency *string `protobuf:"bytes,3,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	// An instance of Amount, the number of units and currency that 'currency' is
	// worth, for instance 1200.12 USD.
	Amount *Amount `protobuf:"bytes,4,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
}

func (x *Price) Reset() {
	*x = Price{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Price) ProtoMessage() {}

func (x *Price) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Price.ProtoReflect.Descriptor instead.
func (*Price) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{17}
}

func (x *Price) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *Price) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

// A document file declaration directive. This directive is used to attach a
// statement to an account, at a particular date. A typical usage would be to
// render PDF files or scans of your bank statements into the account's journal.
// While you can explicitly create those directives in the input syntax, it is
// much more convenient to provide Beancount with a root directory to search for
// filenames in a hierarchy mirroring the chart of accounts, filenames which
// should match the following dated format: "YYYY-MM-DD.*". See options for
// detail. Beancount will automatically create these documents directives based
// on the file hierarchy, and you can get them by parsing the list of entries.
type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A string, the account which the statement or document is associated with.
	Account *string `protobuf:"bytes,3,opt,name=account,proto3,oneof" json:"account,omitempty"`
	// The absolute filename of the document file.
	Filename *string `protobuf:"bytes,4,opt,name=filename,proto3,oneof" json:"filename,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{18}
}

func (x *Document) GetAccount() string {
	if x != nil && x.Account != nil {
		return *x.Account
	}
	return ""
}

func (x *Document) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

// A custom directive. This directive can be used to implement new experimental
// dated features in the Beancount file. This is meant as an intermediate
// measure to be used when you would need to implement a new directive in a
// plugin. These directives will be parsed liberally... any list of tokens are
// supported. All that is required is some unique name for them that acts as a
// "type". These directives are included in the stream and a plugin should be
// able to gather them.
type Custom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A string that represents the type of the directive.
	Type *string `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// A list of values of various simple types supported by the grammar. (Note
	// that this list is not enforced to be consistent for all directives of the
	// same type by the parser.)
	Values []*MetaValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Custom) Reset() {
	*x = Custom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Custom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Custom) ProtoMessage() {}

func (x *Custom) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Custom.ProtoReflect.Descriptor instead.
func (*Custom) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{19}
}

func (x *Custom) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Custom) GetValues() []*MetaValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// A valid directive type. The result of parsing a Beancount file is a sorted
// stream of directives, ordered by date.
//
// Directives may be of multiple types. The most important type of directive in
// the stream is a Transaction and a lot of the processing functions work only
// on those (and filter them out of the stream). All the other directives
// present in the input file are also included in the stream. Processing
// functions and plugins can extract those and implement corresponding
// functionality.
type Directive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Location (filename and lime number) where the directive was parsed from.
	Location *Location `protobuf:"bytes,1,opt,name=location,proto3,oneof" json:"location,omitempty"`
	// Date associated with the directive. This is not optional; all directives
	// have a valid date. Beancount does not consider time, only dates. The line
	// where the directive shows up in the file is used as a secondary sort key
	// beyond the date.
	Date *Date `protobuf:"bytes,2,opt,name=date,proto3,oneof" json:"date,omitempty"`
	// A dict of strings to objects, potentially attached to each of the directive
	// types. The values may be strings, account names, tags, dates, numbers,
	// amounts and currencies. There are two special attributes which are always
	// present on all directives: 'filename' and 'lineno'.
	Meta *Meta `protobuf:"bytes,3,opt,name=meta,proto3,oneof" json:"meta,omitempty"`
	// An optional set of unique tag strings (without the '#').
	Tags []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	// An optional set of unique link strings (without the '^').
	Links []string `protobuf:"bytes,5,rep,name=links,proto3" json:"links,omitempty"`
	// The type specialization.
	//
	// Types that are assignable to Body:
	//	*Directive_Transaction
	//	*Directive_Price
	//	*Directive_Balance
	//	*Directive_Open
	//	*Directive_Close
	//	*Directive_Commodity
	//	*Directive_Pad
	//	*Directive_Document
	//	*Directive_Note
	//	*Directive_Event
	//	*Directive_Query
	//	*Directive_Custom
	Body isDirective_Body `protobuf_oneof:"body"`
}

func (x *Directive) Reset() {
	*x = Directive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Directive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Directive) ProtoMessage() {}

func (x *Directive) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Directive.ProtoReflect.Descriptor instead.
func (*Directive) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{20}
}

func (x *Directive) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Directive) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Directive) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Directive) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Directive) GetLinks() []string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (m *Directive) GetBody() isDirective_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *Directive) GetTransaction() *Transaction {
	if x, ok := x.GetBody().(*Directive_Transaction); ok {
		return x.Transaction
	}
	return nil
}

func (x *Directive) GetPrice() *Price {
	if x, ok := x.GetBody().(*Directive_Price); ok {
		return x.Price
	}
	return nil
}

func (x *Directive) GetBalance() *Balance {
	if x, ok := x.GetBody().(*Directive_Balance); ok {
		return x.Balance
	}
	return nil
}

func (x *Directive) GetOpen() *Open {
	if x, ok := x.GetBody().(*Directive_Open); ok {
		return x.Open
	}
	return nil
}

func (x *Directive) GetClose() *Close {
	if x, ok := x.GetBody().(*Directive_Close); ok {
		return x.Close
	}
	return nil
}

func (x *Directive) GetCommodity() *Commodity {
	if x, ok := x.GetBody().(*Directive_Commodity); ok {
		return x.Commodity
	}
	return nil
}

func (x *Directive) GetPad() *Pad {
	if x, ok := x.GetBody().(*Directive_Pad); ok {
		return x.Pad
	}
	return nil
}

func (x *Directive) GetDocument() *Document {
	if x, ok := x.GetBody().(*Directive_Document); ok {
		return x.Document
	}
	return nil
}

func (x *Directive) GetNote() *Note {
	if x, ok := x.GetBody().(*Directive_Note); ok {
		return x.Note
	}
	return nil
}

func (x *Directive) GetEvent() *Event {
	if x, ok := x.GetBody().(*Directive_Event); ok {
		return x.Event
	}
	return nil
}

func (x *Directive) GetQuery() *Query {
	if x, ok := x.GetBody().(*Directive_Query); ok {
		return x.Query
	}
	return nil
}

func (x *Directive) GetCustom() *Custom {
	if x, ok := x.GetBody().(*Directive_Custom); ok {
		return x.Custom
	}
	return nil
}

type isDirective_Body interface {
	isDirective_Body()
}

type Directive_Transaction struct {
	Transaction *Transaction `protobuf:"bytes,6,opt,name=transaction,proto3,oneof"`
}

type Directive_Price struct {
	Price *Price `protobuf:"bytes,7,opt,name=price,proto3,oneof"`
}

type Directive_Balance struct {
	Balance *Balance `protobuf:"bytes,8,opt,name=balance,proto3,oneof"`
}

type Directive_Open struct {
	Open *Open `protobuf:"bytes,9,opt,name=open,proto3,oneof"`
}

type Directive_Close struct {
	Close *Close `protobuf:"bytes,10,opt,name=close,proto3,oneof"`
}

type Directive_Commodity struct {
	Commodity *Commodity `protobuf:"bytes,11,opt,name=commodity,proto3,oneof"`
}

type Directive_Pad struct {
	Pad *Pad `protobuf:"bytes,12,opt,name=pad,proto3,oneof"`
}

type Directive_Document struct {
	Document *Document `protobuf:"bytes,13,opt,name=document,proto3,oneof"`
}

type Directive_Note struct {
	Note *Note `protobuf:"bytes,14,opt,name=note,proto3,oneof"`
}

type Directive_Event struct {
	Event *Event `protobuf:"bytes,15,opt,name=event,proto3,oneof"`
}

type Directive_Query struct {
	Query *Query `protobuf:"bytes,16,opt,name=query,proto3,oneof"`
}

type Directive_Custom struct {
	Custom *Custom `protobuf:"bytes,17,opt,name=custom,proto3,oneof"`
}

func (*Directive_Transaction) isDirective_Body() {}

func (*Directive_Price) isDirective_Body() {}

func (*Directive_Balance) isDirective_Body() {}

func (*Directive_Open) isDirective_Body() {}

func (*Directive_Close) isDirective_Body() {}

func (*Directive_Commodity) isDirective_Body() {}

func (*Directive_Pad) isDirective_Body() {}

func (*Directive_Document) isDirective_Body() {}

func (*Directive_Note) isDirective_Body() {}

func (*Directive_Event) isDirective_Body() {}

func (*Directive_Query) isDirective_Body() {}

func (*Directive_Custom) isDirective_Body() {}

// A location in an input file. This represents a span of lines.
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An absolute filename path.
	//
	// TODO(blais): Change this to an index to the short list of filenames
	// involved from ProcessingInfo. Make index 0 the special "no file" index for
	// generated directives.
	Filename *string `protobuf:"bytes,1,opt,name=filename,proto3,oneof" json:"filename,omitempty"`
	// The beginning line number.
	Lineno *int32 `protobuf:"varint,2,opt,name=lineno,proto3,oneof" json:"lineno,omitempty"`
	// An optional ending line number.
	LinenoEnd *int32 `protobuf:"varint,3,opt,name=linenoEnd,proto3,oneof" json:"linenoEnd,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{21}
}

func (x *Location) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *Location) GetLineno() int32 {
	if x != nil && x.Lineno != nil {
		return *x.Lineno
	}
	return 0
}

func (x *Location) GetLinenoEnd() int32 {
	if x != nil && x.LinenoEnd != nil {
		return *x.LinenoEnd
	}
	return 0
}

// An error in processing.
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error message.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Location where the error occurred in the file, if relevant. The line
	// numbers are optional and may be left unset if not relevant to the context.
	Location *Location `protobuf:"bytes,2,opt,name=location,proto3,oneof" json:"location,omitempty"`
	// A unique hash referencing of a corresponding directive.
	Dirhash *string `protobuf:"bytes,3,opt,name=dirhash,proto3,oneof" json:"dirhash,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{22}
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Error) GetDirhash() string {
	if x != nil && x.Dirhash != nil {
		return *x.Dirhash
	}
	return ""
}

// Container for a list of directives and more infos.
type LedgerProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Directives []*Directive            `protobuf:"bytes,1,rep,name=directives,proto3" json:"directives,omitempty"`
	Errors     []*Error                `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	Options    *options.Options        `protobuf:"bytes,3,opt,name=options,proto3,oneof" json:"options,omitempty"`
	Info       *options.ProcessingInfo `protobuf:"bytes,4,opt,name=info,proto3,oneof" json:"info,omitempty"`
}

func (x *LedgerProto) Reset() {
	*x = LedgerProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerProto) ProtoMessage() {}

func (x *LedgerProto) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerProto.ProtoReflect.Descriptor instead.
func (*LedgerProto) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{23}
}

func (x *LedgerProto) GetDirectives() []*Directive {
	if x != nil {
		return x.Directives
	}
	return nil
}

func (x *LedgerProto) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *LedgerProto) GetOptions() *options.Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *LedgerProto) GetInfo() *options.ProcessingInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type Meta_KV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string    `protobuf:"bytes,1,opt,name=key,proto3,oneof" json:"key,omitempty"`
	Value *MetaValue `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *Meta_KV) Reset() {
	*x = Meta_KV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta_KV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta_KV) ProtoMessage() {}

func (x *Meta_KV) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta_KV.ProtoReflect.Descriptor instead.
func (*Meta_KV) Descriptor() ([]byte, []int) {
	return file_ledger_data_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Meta_KV) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Meta_KV) GetValue() *MetaValue {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_ledger_data_proto protoreflect.FileDescriptor

var file_ledger_data_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x1a, 0x11, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x6c, 0x69, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x65,
	0x71, 0x75, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x65,
	0x71, 0x75, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x65, 0x78, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x22, 0xd4, 0x02, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x12, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x04,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x66, 0x6c,
	0x61, 0x67, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x04,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x02, 0x6b, 0x76, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x4b,
	0x56, 0x52, 0x02, 0x6b, 0x76, 0x1a, 0x5b, 0x0a, 0x02, 0x4b, 0x56, 0x12, 0x15, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x6e, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x22, 0xc1, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x6f, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x48, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x8a, 0x03, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x48, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x03, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x04, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x48, 0x06, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x22, 0x7c, 0x0a, 0x0a, 0x54, 0x78, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x03, 0x74, 0x78, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x74, 0x78, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x48, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x74, 0x78, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x22, 0xb2, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70,
	0x61, 0x79, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x70, 0x61,
	0x79, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6e, 0x61, 0x72, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x6e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x1d, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x48, 0x01, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x32, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x39, 0x0a, 0x09,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x6d, 0x0a, 0x03, 0x50, 0x61, 0x64, 0x12, 0x1d,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf1, 0x01, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x48, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x09, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x48, 0x02, 0x52, 0x09, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5c, 0x0a, 0x04, 0x4e, 0x6f,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x60, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x05, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x6d,
	0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x63, 0x0a,
	0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x55, 0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd5, 0x05, 0x0a, 0x09, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x03, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x22, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6f,
	0x70, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a,
	0x03, 0x70, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x64, 0x48, 0x00, 0x52, 0x03, 0x70, 0x61, 0x64, 0x12, 0x2e,
	0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x28, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x22, 0x91, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x6e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x6c, 0x69, 0x6e, 0x65, 0x6e, 0x6f, 0x45, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x6e, 0x6f, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x6e, 0x6f, 0x45, 0x6e, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x64, 0x69, 0x72, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x07, 0x64, 0x69, 0x72, 0x68, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x69, 0x72,
	0x68, 0x61, 0x73, 0x68, 0x22, 0xdf, 0x01, 0x0a, 0x0b, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2f,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x19, 0x5a, 0x17, 0x67, 0x6f, 0x2e, 0x76, 0x69, 0x78,
	0x61, 0x6c, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x65, 0x73, 0x70, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ledger_data_proto_rawDescOnce sync.Once
	file_ledger_data_proto_rawDescData = file_ledger_data_proto_rawDesc
)

func file_ledger_data_proto_rawDescGZIP() []byte {
	file_ledger_data_proto_rawDescOnce.Do(func() {
		file_ledger_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_ledger_data_proto_rawDescData)
	})
	return file_ledger_data_proto_rawDescData
}

var file_ledger_data_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_ledger_data_proto_goTypes = []interface{}{
	(*AccountTypes)(nil),           // 0: ledger.AccountTypes
	(*MetaValue)(nil),              // 1: ledger.MetaValue
	(*Meta)(nil),                   // 2: ledger.Meta
	(*Amount)(nil),                 // 3: ledger.Amount
	(*Cost)(nil),                   // 4: ledger.Cost
	(*Position)(nil),               // 5: ledger.Position
	(*Posting)(nil),                // 6: ledger.Posting
	(*TxnPosting)(nil),             // 7: ledger.TxnPosting
	(*Transaction)(nil),            // 8: ledger.Transaction
	(*Open)(nil),                   // 9: ledger.Open
	(*Close)(nil),                  // 10: ledger.Close
	(*Commodity)(nil),              // 11: ledger.Commodity
	(*Pad)(nil),                    // 12: ledger.Pad
	(*Balance)(nil),                // 13: ledger.Balance
	(*Note)(nil),                   // 14: ledger.Note
	(*Event)(nil),                  // 15: ledger.Event
	(*Query)(nil),                  // 16: ledger.Query
	(*Price)(nil),                  // 17: ledger.Price
	(*Document)(nil),               // 18: ledger.Document
	(*Custom)(nil),                 // 19: ledger.Custom
	(*Directive)(nil),              // 20: ledger.Directive
	(*Location)(nil),               // 21: ledger.Location
	(*Error)(nil),                  // 22: ledger.Error
	(*LedgerProto)(nil),            // 23: ledger.LedgerProto
	(*Meta_KV)(nil),                // 24: ledger.Meta.KV
	(*Date)(nil),                   // 25: ledger.Date
	(*Number)(nil),                 // 26: ledger.Number
	(*Spec)(nil),                   // 27: ledger.Spec
	(options.Booking)(0),           // 28: options.Booking
	(*options.Options)(nil),        // 29: options.Options
	(*options.ProcessingInfo)(nil), // 30: options.ProcessingInfo
}
var file_ledger_data_proto_depIdxs = []int32{
	25, // 0: ledger.MetaValue.date:type_name -> ledger.Date
	26, // 1: ledger.MetaValue.number:type_name -> ledger.Number
	3,  // 2: ledger.MetaValue.amount:type_name -> ledger.Amount
	24, // 3: ledger.Meta.kv:type_name -> ledger.Meta.KV
	26, // 4: ledger.Amount.number:type_name -> ledger.Number
	26, // 5: ledger.Cost.number:type_name -> ledger.Number
	25, // 6: ledger.Cost.date:type_name -> ledger.Date
	3,  // 7: ledger.Position.units:type_name -> ledger.Amount
	4,  // 8: ledger.Position.cost:type_name -> ledger.Cost
	21, // 9: ledger.Posting.location:type_name -> ledger.Location
	2,  // 10: ledger.Posting.meta:type_name -> ledger.Meta
	25, // 11: ledger.Posting.date:type_name -> ledger.Date
	5,  // 12: ledger.Posting.position:type_name -> ledger.Position
	3,  // 13: ledger.Posting.price:type_name -> ledger.Amount
	27, // 14: ledger.Posting.spec:type_name -> ledger.Spec
	8,  // 15: ledger.TxnPosting.txn:type_name -> ledger.Transaction
	6,  // 16: ledger.TxnPosting.posting:type_name -> ledger.Posting
	6,  // 17: ledger.Transaction.postings:type_name -> ledger.Posting
	28, // 18: ledger.Open.booking:type_name -> options.Booking
	3,  // 19: ledger.Balance.amount:type_name -> ledger.Amount
	26, // 20: ledger.Balance.tolerance:type_name -> ledger.Number
	3,  // 21: ledger.Balance.diffAmount:type_name -> ledger.Amount
	3,  // 22: ledger.Price.amount:type_name -> ledger.Amount
	1,  // 23: ledger.Custom.values:type_name -> ledger.MetaValue
	21, // 24: ledger.Directive.location:type_name -> ledger.Location
	25, // 25: ledger.Directive.date:type_name -> ledger.Date
	2,  // 26: ledger.Directive.meta:type_name -> ledger.Meta
	8,  // 27: ledger.Directive.transaction:type_name -> ledger.Transaction
	17, // 28: ledger.Directive.price:type_name -> ledger.Price
	13, // 29: ledger.Directive.balance:type_name -> ledger.Balance
	9,  // 30: ledger.Directive.open:type_name -> ledger.Open
	10, // 31: ledger.Directive.close:type_name -> ledger.Close
	11, // 32: ledger.Directive.commodity:type_name -> ledger.Commodity
	12, // 33: ledger.Directive.pad:type_name -> ledger.Pad
	18, // 34: ledger.Directive.document:type_name -> ledger.Document
	14, // 35: ledger.Directive.note:type_name -> ledger.Note
	15, // 36: ledger.Directive.event:type_name -> ledger.Event
	16, // 37: ledger.Directive.query:type_name -> ledger.Query
	19, // 38: ledger.Directive.custom:type_name -> ledger.Custom
	21, // 39: ledger.Error.location:type_name -> ledger.Location
	20, // 40: ledger.LedgerProto.directives:type_name -> ledger.Directive
	22, // 41: ledger.LedgerProto.errors:type_name -> ledger.Error
	29, // 42: ledger.LedgerProto.options:type_name -> options.Options
	30, // 43: ledger.LedgerProto.info:type_name -> options.ProcessingInfo
	1,  // 44: ledger.Meta.KV.value:type_name -> ledger.MetaValue
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_ledger_data_proto_init() }
func file_ledger_data_proto_init() {
	if File_ledger_data_proto != nil {
		return
	}
	file_ledger_date_proto_init()
	file_ledger_number_proto_init()
	file_ledger_parser_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ledger_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Amount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Posting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxnPosting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Open); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Close); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commodity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Price); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Custom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Directive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_data_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta_KV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ledger_data_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_ledger_data_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*MetaValue_Text)(nil),
		(*MetaValue_Account)(nil),
		(*MetaValue_Currency)(nil),
		(*MetaValue_Tag)(nil),
		(*MetaValue_Link)(nil),
		(*MetaValue_Flag)(nil),
		(*MetaValue_Date)(nil),
		(*MetaValue_Boolean)(nil),
		(*MetaValue_Integer)(nil),
		(*MetaValue_Number)(nil),
		(*MetaValue_Amount)(nil),
	}
	file_ledger_data_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_ledger_data_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_ledger_data_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_ledger_data_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_ledger_data_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_ledger_data_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_ledger_data_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_ledger_data_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_ledger_data_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_ledger_data_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_ledger_data_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_ledger_data_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_ledger_data_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_ledger_data_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_ledger_data_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_ledger_data_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_ledger_data_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_ledger_data_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*Directive_Transaction)(nil),
		(*Directive_Price)(nil),
		(*Directive_Balance)(nil),
		(*Directive_Open)(nil),
		(*Directive_Close)(nil),
		(*Directive_Commodity)(nil),
		(*Directive_Pad)(nil),
		(*Directive_Document)(nil),
		(*Directive_Note)(nil),
		(*Directive_Event)(nil),
		(*Directive_Query)(nil),
		(*Directive_Custom)(nil),
	}
	file_ledger_data_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_ledger_data_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_ledger_data_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_ledger_data_proto_msgTypes[24].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ledger_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ledger_data_proto_goTypes,
		DependencyIndexes: file_ledger_data_proto_depIdxs,
		MessageInfos:      file_ledger_data_proto_msgTypes,
	}.Build()
	File_ledger_data_proto = out.File
	file_ledger_data_proto_rawDesc = nil
	file_ledger_data_proto_goTypes = nil
	file_ledger_data_proto_depIdxs = nil
}
