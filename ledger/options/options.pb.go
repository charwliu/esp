// -*- mode: protobuf -*-
//
// A schema for Beancount's options. This is produced by the parser and provided
// for plugin writers to use.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: ledger/options/options.proto

package options

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A set of valid booking method names for positions on accounts.
// See http://furius.ca/beancount/doc/inventories for a full explanation.
type Booking int32

const (
	Booking_UNKNOWN          Booking = 0
	Booking_STRICT           Booking = 1 // Reject ambiguous matches with an error.
	Booking_STRICT_WITH_SIZE Booking = 2 // Reject ambiguous matches with an error but if a
	// lot matches the size exactly, accept it the oldest.
	Booking_NONE    Booking = 3 // Disable matching and accept the creation of mixed inventories.
	Booking_AVERAGE Booking = 4 // Average cost booking: merge all matching lots before and after.
	Booking_FIFO    Booking = 5 // First-in first-out in the case of ambiguity.
	Booking_LIFO    Booking = 6 // Last-in first-out in the case of ambiguity.
)

// Enum value maps for Booking.
var (
	Booking_name = map[int32]string{
		0: "UNKNOWN",
		1: "STRICT",
		2: "STRICT_WITH_SIZE",
		3: "NONE",
		4: "AVERAGE",
		5: "FIFO",
		6: "LIFO",
	}
	Booking_value = map[string]int32{
		"UNKNOWN":          0,
		"STRICT":           1,
		"STRICT_WITH_SIZE": 2,
		"NONE":             3,
		"AVERAGE":          4,
		"FIFO":             5,
		"LIFO":             6,
	}
)

func (x Booking) Enum() *Booking {
	p := new(Booking)
	*p = x
	return p
}

func (x Booking) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Booking) Descriptor() protoreflect.EnumDescriptor {
	return file_ledger_options_options_proto_enumTypes[0].Descriptor()
}

func (Booking) Type() protoreflect.EnumType {
	return &file_ledger_options_options_proto_enumTypes[0]
}

func (x Booking) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Booking.Descriptor instead.
func (Booking) EnumDescriptor() ([]byte, []int) {
	return file_ledger_options_options_proto_rawDescGZIP(), []int{0}
}

// A string that defines which set of plugins is to be run by the loader: if
// the mode is "default", a preset list of plugins are automatically run
// before any user plugin. If the mode is "raw", no preset plugins are run at
// all, only user plugins are run (the user should explicitly load the
// desired list of plugins by using the 'plugin' option. This is useful in case the
// user wants full control over the ordering in which the plugins are run).
//
// TODO(blais): Make the default include all the core plugins, as PEDANTIC.
// Let that be the default. Make DEFAULT some other name. V3 should include
// all the pedantry by default.
type Options_ProcessingMode int32

const (
	Options_DEFAULT Options_ProcessingMode = 0
	Options_RAW     Options_ProcessingMode = 1
)

// Enum value maps for Options_ProcessingMode.
var (
	Options_ProcessingMode_name = map[int32]string{
		0: "DEFAULT",
		1: "RAW",
	}
	Options_ProcessingMode_value = map[string]int32{
		"DEFAULT": 0,
		"RAW":     1,
	}
)

func (x Options_ProcessingMode) Enum() *Options_ProcessingMode {
	p := new(Options_ProcessingMode)
	*p = x
	return p
}

func (x Options_ProcessingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Options_ProcessingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ledger_options_options_proto_enumTypes[1].Descriptor()
}

func (Options_ProcessingMode) Type() protoreflect.EnumType {
	return &file_ledger_options_options_proto_enumTypes[1]
}

func (x Options_ProcessingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Options_ProcessingMode.Descriptor instead.
func (Options_ProcessingMode) EnumDescriptor() ([]byte, []int) {
	return file_ledger_options_options_proto_rawDescGZIP(), []int{3, 0}
}

// TODO(blais): Reimplement the display context on currency pairs and encode as
// a proto here.
type DisplayContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisplayContext) Reset() {
	*x = DisplayContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_options_options_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayContext) ProtoMessage() {}

func (x *DisplayContext) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_options_options_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayContext.ProtoReflect.Descriptor instead.
func (*DisplayContext) Descriptor() ([]byte, []int) {
	return file_ledger_options_options_proto_rawDescGZIP(), []int{0}
}

// Data produced as a by-product of the parsing process. This is essentially
// read-only state that is conceptually separate from the input options,
// produced by the parser.
type ProcessingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the top-level Beancount input file parsed from which the
	// contents of the ledger have been extracted. This may be None, if no file
	// was used.
	Filename *string `protobuf:"bytes,1,opt,name=filename,proto3,oneof" json:"filename,omitempty"`
	// A list of other filenames included. This is output from the parser and
	// processed by the loader but the list should otherwise have been cleared by
	// the time it gets to the top-level loader.load_*() function that invoked it.
	// The filenames are absolute. Relative include filenames are resolved against
	// the file that contains the include directives.
	//
	// This is used in the parser, but also, the loader sets this list to the
	// full list of parsed absolute filenames in the options map. This is how you
	// can find out the entire list of files involved in a Beancount load
	// procedure.
	Include []string `protobuf:"bytes,2,rep,name=include,proto3" json:"include,omitempty"`
	// A hash of some of the input data. This is used to supplement the timestamps
	// of the input files for the purpose of load caching. We typically hash the
	// sizes of the files or perhaps even some of the contents, or determine any
	// of the inputs have changed beyond the timestamps of the input files.
	// (Internal use only; do not rely on this.)
	InputHash *string `protobuf:"bytes,3,opt,name=inputHash,proto3,oneof" json:"inputHash,omitempty"`
	// An instance of DisplayContext, which is used to format numbers for output
	// with precision inferred from that in the input file. This is created
	// automatically by the parser.
	Dcontext *DisplayContext `protobuf:"bytes,4,opt,name=dcontext,proto3,oneof" json:"dcontext,omitempty"`
	// A set of all the commodities that we have seen in the file. This is mainly
	// used for efficiency, best computed once at parse time.
	Commodities []string `protobuf:"bytes,5,rep,name=commodities,proto3" json:"commodities,omitempty"`
}

func (x *ProcessingInfo) Reset() {
	*x = ProcessingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_options_options_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingInfo) ProtoMessage() {}

func (x *ProcessingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_options_options_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingInfo.ProtoReflect.Descriptor instead.
func (*ProcessingInfo) Descriptor() ([]byte, []int) {
	return file_ledger_options_options_proto_rawDescGZIP(), []int{1}
}

func (x *ProcessingInfo) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *ProcessingInfo) GetInclude() []string {
	if x != nil {
		return x.Include
	}
	return nil
}

func (x *ProcessingInfo) GetInputHash() string {
	if x != nil && x.InputHash != nil {
		return *x.InputHash
	}
	return ""
}

func (x *ProcessingInfo) GetDcontext() *DisplayContext {
	if x != nil {
		return x.Dcontext
	}
	return nil
}

func (x *ProcessingInfo) GetCommodities() []string {
	if x != nil {
		return x.Commodities
	}
	return nil
}

// Root names for accounts.
// TODO(blais): Join this with the AccountTypes type.
type AccountRoots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Types:
	//	*AccountRoots_Assets
	//	*AccountRoots_Liabilities
	//	*AccountRoots_Equity
	//	*AccountRoots_Income
	//	*AccountRoots_Expenses
	Types isAccountRoots_Types `protobuf_oneof:"types"`
}

func (x *AccountRoots) Reset() {
	*x = AccountRoots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_options_options_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRoots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRoots) ProtoMessage() {}

func (x *AccountRoots) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_options_options_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRoots.ProtoReflect.Descriptor instead.
func (*AccountRoots) Descriptor() ([]byte, []int) {
	return file_ledger_options_options_proto_rawDescGZIP(), []int{2}
}

func (m *AccountRoots) GetTypes() isAccountRoots_Types {
	if m != nil {
		return m.Types
	}
	return nil
}

func (x *AccountRoots) GetAssets() string {
	if x, ok := x.GetTypes().(*AccountRoots_Assets); ok {
		return x.Assets
	}
	return ""
}

func (x *AccountRoots) GetLiabilities() string {
	if x, ok := x.GetTypes().(*AccountRoots_Liabilities); ok {
		return x.Liabilities
	}
	return ""
}

func (x *AccountRoots) GetEquity() string {
	if x, ok := x.GetTypes().(*AccountRoots_Equity); ok {
		return x.Equity
	}
	return ""
}

func (x *AccountRoots) GetIncome() string {
	if x, ok := x.GetTypes().(*AccountRoots_Income); ok {
		return x.Income
	}
	return ""
}

func (x *AccountRoots) GetExpenses() string {
	if x, ok := x.GetTypes().(*AccountRoots_Expenses); ok {
		return x.Expenses
	}
	return ""
}

type isAccountRoots_Types interface {
	isAccountRoots_Types()
}

type AccountRoots_Assets struct {
	Assets string `protobuf:"bytes,1,opt,name=assets,proto3,oneof"`
}

type AccountRoots_Liabilities struct {
	Liabilities string `protobuf:"bytes,2,opt,name=liabilities,proto3,oneof"`
}

type AccountRoots_Equity struct {
	Equity string `protobuf:"bytes,3,opt,name=equity,proto3,oneof"`
}

type AccountRoots_Income struct {
	Income string `protobuf:"bytes,4,opt,name=income,proto3,oneof"`
}

type AccountRoots_Expenses struct {
	Expenses string `protobuf:"bytes,5,opt,name=expenses,proto3,oneof"`
}

func (*AccountRoots_Assets) isAccountRoots_Types() {}

func (*AccountRoots_Liabilities) isAccountRoots_Types() {}

func (*AccountRoots_Equity) isAccountRoots_Types() {}

func (*AccountRoots_Income) isAccountRoots_Types() {}

func (*AccountRoots_Expenses) isAccountRoots_Types() {}

// Options that are visible to the user and that can be set.
// Next token: 20
type Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  The title of this ledger / input file. This shows up at the top of every
	//  page. e.g. "Joe Smith's Personal Ledger".
	Title *string `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Root names of every account. This can be used to customize your category
	// names, so that if you prefer "Revenue" over "Income" or "Capital" over
	// "Equity", you can set them here. The account names in your input files
	// must match, and the parser will validate these. You should place these
	// options at the beginning of your file, because they affect how the parser
	// recognizes account names.
	Root *AccountRoots `protobuf:"bytes,2,opt,name=root,proto3,oneof" json:"root,omitempty"`
	// Leaf name of the equity account used for summarizing previous transactions
	// into opening balances. e.g. "Opening-Balances".
	AccountPreviousBalances *string `protobuf:"bytes,3,opt,name=accountPreviousBalances,proto3,oneof" json:"accountPreviousBalances,omitempty"`
	// Leaf name of the equity account used for transferring previous retained
	// earnings from income and expenses accrued before the beginning of the
	// exercise into the balance sheet. e.g., "Earnings:Previous".
	AccountPreviousEarnings *string `protobuf:"bytes,4,opt,name=accountPreviousEarnings,proto3,oneof" json:"accountPreviousEarnings,omitempty"`
	// Leaf name of the equity account used for inserting conversions that will
	// zero out remaining amounts due to transfers before the opening date. This
	// will essentially "fixup" the basic accounting equation due to the httperror
	// that priced conversions introduce. e.g., "Conversions:Previous".
	AccountPreviousConversions *string `protobuf:"bytes,5,opt,name=accountPreviousConversions,proto3,oneof" json:"accountPreviousConversions,omitempty"`
	// Leaf name of the equity account used for transferring current retained
	// earnings from income and expenses accrued during the current exercise into
	// the balance sheet. This is most often called "Net Income". e.g.,
	// "Earnings:Current".
	AccountCurrentEarnings *string `protobuf:"bytes,6,opt,name=accountCurrentEarnings,proto3,oneof" json:"accountCurrentEarnings,omitempty"`
	// Leaf name of the equity account used for inserting conversions that will
	// zero out remaining amounts due to transfers during the exercise period.
	// e.g., "Conversions:Current".
	AccountCurrentConversions *string `protobuf:"bytes,7,opt,name=accountCurrentConversions,proto3,oneof" json:"accountCurrentConversions,omitempty"`
	// The name of an account to be used to post unrealized gains to. This is used
	// when making any kind of conversion from cost to price on a balance sheet
	// (or any realization). The amount inserted - the difference between book
	// value and market value - has to be posted to a gains account to keep the
	// balance on the sheet. This has no effect on behavior, other than providing
	// a configurable account name for such postings to occur. Its value should
	// not include the root account (e.g., defaults to "Unrealized").
	AccountUnrealizedGains *string `protobuf:"bytes,19,opt,name=accountUnrealizedGains,proto3,oneof" json:"accountUnrealizedGains,omitempty"`
	// The name of an account to be used to post to and accumulate rounding error.
	// This is unset and this feature is disabled by default; setting this value
	// to an account name will automatically enable the addition of postings on
	// all transactions that have a residual amount. e.g., "Rounding".
	AccountRounding *string `protobuf:"bytes,8,opt,name=accountRounding,proto3,oneof" json:"accountRounding,omitempty"`
	// The imaginary currency used to convert all units for conversions at a
	// degenerate rate of zero. This can be any currency name that isn't used in
	// the rest of the ledger. Choose something unique that makes sense in your
	// language. e.g., "NOTHING".
	ConversionCurrency *string `protobuf:"bytes,9,opt,name=conversionCurrency,proto3,oneof" json:"conversionCurrency,omitempty"`
	// TODO(blais): This needs review, and possibly merging with display context.
	// This is actually a mapping.
	InferredToleranceDefault []string `protobuf:"bytes,10,rep,name=inferredToleranceDefault,proto3" json:"inferredToleranceDefault,omitempty"`
	// A multiplier for inferred tolerance values.
	//
	// When the tolerance values aren't specified explicitly via the
	// 'inferred_tolerance_default' option, the tolerance is inferred from the
	// numbers in the input file. For example, if a transaction has posting with
	// a value like '32.424 CAD', the tolerance for CAD will be inferred to be
	// 0.001 times some multiplier. This is the multiplier value.
	//
	// We normally assume that the institution we're reproducing this posting
	// from applies rounding, and so the default value for the multiplier is
	// 0.5, that is, half of the smallest digit encountered.
	//
	// You can customize this multiplier by changing this option, typically
	// expanding it to account for amounts slightly beyond the usual tolerance,
	// for example, if you deal with institutions with bad of unexpected rounding
	// behaviour.
	//
	// For detailed documentation about how tolerances are handled, see this doc:
	// http://furius.ca/beancount/doc/tolerances
	//
	// e.g., "0.5"
	InferredToleranceMultiplier *string `protobuf:"bytes,11,opt,name=inferredToleranceMultiplier,proto3,oneof" json:"inferredToleranceMultiplier,omitempty"`
	// Enable a feature that expands the maximum tolerance inferred on
	// transactions to include values on cost currencies inferred by postings
	// held at-cost or converted at price. Those postings can imply a tolerance
	// value by multiplying the smallest digit of the unit by the cost or price
	// value and taking half of that value.
	//
	// For example, if a posting has an amount of "2.345 RGAGX {45.00 USD}"
	// attached to it, it implies a tolerance of 0.001 x 45.00 * M = 0.045 USD
	// (where M is the inferred_tolerance_multiplier) and this is added to the
	// mix to enlarge the tolerance allowed for units of USD on that transaction.
	// All the normally inferred tolerances (see
	// http://furius.ca/beancount/doc/tolerances) are still taken into account.
	// Enabling this flag only makes the tolerances potentially wider.
	InferToleranceFromCost *bool `protobuf:"varint,12,opt,name=inferToleranceFromCost,proto3,oneof" json:"inferToleranceFromCost,omitempty"`
	// A list of directory roots, relative to the CWD, which should be searched
	// for document files. For the document files to be automatically found they
	// must have the following filename format: YYYY-MM-DD.(.*).
	// e.g., "/path/to/your/documents/archive"
	Documents []string `protobuf:"bytes,13,rep,name=documents,proto3" json:"documents,omitempty"`
	// A list of currencies that we single out during reporting and create
	// dedicated columns for. This is used to indicate the main currencies that
	// you work with in real life. (Refrain from listing all the possible
	// currencies here, this is not what it is made for; just list the very
	// principal currencies you use daily only.)
	//
	// Because our system is agnostic to any unit definition that occurs in the
	// input file, we use this to display these values in table cells without
	// their associated unit strings. This allows you to import the numbers in a
	// spreadsheet (e.g, "101.00 USD" does not get parsed by a spreadsheet
	// import, but "101.00" does).
	//
	// If you need to enter a list of operating currencies, you may input this
	// option multiple times, that is, you repeat the entire directive once for
	// each desired operating currency.
	//
	// e.g., "USD".
	OperatingCurrency []string `protobuf:"bytes,14,rep,name=operatingCurrency,proto3" json:"operatingCurrency,omitempty"`
	// A boolean, true if the number formatting routines should output commas
	// as thousand separators in numbers.
	RenderCommas         *bool                   `protobuf:"varint,15,opt,name=renderCommas,proto3,oneof" json:"renderCommas,omitempty"`
	PluginProcessingMode *Options_ProcessingMode `protobuf:"varint,16,opt,name=pluginProcessingMode,proto3,enum=options.Options_ProcessingMode,oneof" json:"pluginProcessingMode,omitempty"`
	// The booking method to apply to ambiguous reductions of inventory lots.
	// When a posting is matched against the contents of an account's inventory
	// to reduce its contents and multiple lots match, the method dictates how
	// this ambiguity is resolved. Methods include "STRICT" which raises an
	// error, "FIFO" which selects the oldest lot, and "NONE" which allows any
	// reduction to be added to the inventory despite the absence of a match
	// (resulting in mixed inventories).
	//
	// See the following documents for details:
	// http://furius.ca/beancount/doc/inventories
	// http://furius.ca/beancount/doc/proposal-booking
	//
	// e.g., STRICT
	BookingMethod *Booking `protobuf:"varint,17,opt,name=bookingMethod,proto3,enum=options.Booking,oneof" json:"bookingMethod,omitempty"`
}

func (x *Options) Reset() {
	*x = Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_options_options_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options) ProtoMessage() {}

func (x *Options) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_options_options_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options.ProtoReflect.Descriptor instead.
func (*Options) Descriptor() ([]byte, []int) {
	return file_ledger_options_options_proto_rawDescGZIP(), []int{3}
}

func (x *Options) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Options) GetRoot() *AccountRoots {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *Options) GetAccountPreviousBalances() string {
	if x != nil && x.AccountPreviousBalances != nil {
		return *x.AccountPreviousBalances
	}
	return ""
}

func (x *Options) GetAccountPreviousEarnings() string {
	if x != nil && x.AccountPreviousEarnings != nil {
		return *x.AccountPreviousEarnings
	}
	return ""
}

func (x *Options) GetAccountPreviousConversions() string {
	if x != nil && x.AccountPreviousConversions != nil {
		return *x.AccountPreviousConversions
	}
	return ""
}

func (x *Options) GetAccountCurrentEarnings() string {
	if x != nil && x.AccountCurrentEarnings != nil {
		return *x.AccountCurrentEarnings
	}
	return ""
}

func (x *Options) GetAccountCurrentConversions() string {
	if x != nil && x.AccountCurrentConversions != nil {
		return *x.AccountCurrentConversions
	}
	return ""
}

func (x *Options) GetAccountUnrealizedGains() string {
	if x != nil && x.AccountUnrealizedGains != nil {
		return *x.AccountUnrealizedGains
	}
	return ""
}

func (x *Options) GetAccountRounding() string {
	if x != nil && x.AccountRounding != nil {
		return *x.AccountRounding
	}
	return ""
}

func (x *Options) GetConversionCurrency() string {
	if x != nil && x.ConversionCurrency != nil {
		return *x.ConversionCurrency
	}
	return ""
}

func (x *Options) GetInferredToleranceDefault() []string {
	if x != nil {
		return x.InferredToleranceDefault
	}
	return nil
}

func (x *Options) GetInferredToleranceMultiplier() string {
	if x != nil && x.InferredToleranceMultiplier != nil {
		return *x.InferredToleranceMultiplier
	}
	return ""
}

func (x *Options) GetInferToleranceFromCost() bool {
	if x != nil && x.InferToleranceFromCost != nil {
		return *x.InferToleranceFromCost
	}
	return false
}

func (x *Options) GetDocuments() []string {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *Options) GetOperatingCurrency() []string {
	if x != nil {
		return x.OperatingCurrency
	}
	return nil
}

func (x *Options) GetRenderCommas() bool {
	if x != nil && x.RenderCommas != nil {
		return *x.RenderCommas
	}
	return false
}

func (x *Options) GetPluginProcessingMode() Options_ProcessingMode {
	if x != nil && x.PluginProcessingMode != nil {
		return *x.PluginProcessingMode
	}
	return Options_DEFAULT
}

func (x *Options) GetBookingMethod() Booking {
	if x != nil && x.BookingMethod != nil {
		return *x.BookingMethod
	}
	return Booking_UNKNOWN
}

var File_ledger_options_options_proto protoreflect.FileDescriptor

var file_ledger_options_options_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xf2, 0x01, 0x0a, 0x0e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x08, 0x64, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x02, 0x52, 0x08, 0x64, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xa7,
	0x01, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x12,
	0x18, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0b, 0x6c, 0x69, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x06, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x42,
	0x07, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x8c, 0x0b, 0x0a, 0x07, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x6f, 0x6f, 0x74, 0x73, 0x48, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a,
	0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x3b, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x41, 0x0a, 0x19, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x19, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x3b, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x47, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x47, 0x61, 0x69, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x45, 0x0a, 0x1b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x1b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x16, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x54,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x16, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x54,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x27, 0x0a, 0x0c, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x0c, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x14, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x0d, 0x52, 0x14, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x0e, 0x52, 0x0d, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x22,
	0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x52, 0x41, 0x57, 0x10, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x1c, 0x0a, 0x1a,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x47, 0x61, 0x69, 0x6e, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x73, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2a, 0x63, 0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41,
	0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x46, 0x4f,
	0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x46, 0x4f, 0x10, 0x06, 0x42, 0x21, 0x5a, 0x1f,
	0x67, 0x6f, 0x2e, 0x76, 0x69, 0x78, 0x61, 0x6c, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x65, 0x73, 0x70,
	0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ledger_options_options_proto_rawDescOnce sync.Once
	file_ledger_options_options_proto_rawDescData = file_ledger_options_options_proto_rawDesc
)

func file_ledger_options_options_proto_rawDescGZIP() []byte {
	file_ledger_options_options_proto_rawDescOnce.Do(func() {
		file_ledger_options_options_proto_rawDescData = protoimpl.X.CompressGZIP(file_ledger_options_options_proto_rawDescData)
	})
	return file_ledger_options_options_proto_rawDescData
}

var file_ledger_options_options_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ledger_options_options_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ledger_options_options_proto_goTypes = []interface{}{
	(Booking)(0),                // 0: options.Booking
	(Options_ProcessingMode)(0), // 1: options.Options.ProcessingMode
	(*DisplayContext)(nil),      // 2: options.DisplayContext
	(*ProcessingInfo)(nil),      // 3: options.ProcessingInfo
	(*AccountRoots)(nil),        // 4: options.AccountRoots
	(*Options)(nil),             // 5: options.Options
}
var file_ledger_options_options_proto_depIdxs = []int32{
	2, // 0: options.ProcessingInfo.dcontext:type_name -> options.DisplayContext
	4, // 1: options.Options.root:type_name -> options.AccountRoots
	1, // 2: options.Options.pluginProcessingMode:type_name -> options.Options.ProcessingMode
	0, // 3: options.Options.bookingMethod:type_name -> options.Booking
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_ledger_options_options_proto_init() }
func file_ledger_options_options_proto_init() {
	if File_ledger_options_options_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ledger_options_options_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_options_options_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_options_options_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRoots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_options_options_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ledger_options_options_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_ledger_options_options_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*AccountRoots_Assets)(nil),
		(*AccountRoots_Liabilities)(nil),
		(*AccountRoots_Equity)(nil),
		(*AccountRoots_Income)(nil),
		(*AccountRoots_Expenses)(nil),
	}
	file_ledger_options_options_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ledger_options_options_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ledger_options_options_proto_goTypes,
		DependencyIndexes: file_ledger_options_options_proto_depIdxs,
		EnumInfos:         file_ledger_options_options_proto_enumTypes,
		MessageInfos:      file_ledger_options_options_proto_msgTypes,
	}.Build()
	File_ledger_options_options_proto = out.File
	file_ledger_options_options_proto_rawDesc = nil
	file_ledger_options_options_proto_goTypes = nil
	file_ledger_options_options_proto_depIdxs = nil
}
