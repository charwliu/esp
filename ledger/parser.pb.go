// -*- mode: protobuf -*-
//
// Schemas for messages that are specific to Beancount's parser output. These
// are only used for the intermediate state of the parsed data, merely
// representing the production of the parser, before the subsequent processing
// (booking) that will produce the finalized directives.
//
// The data structures seen here are not visible in the final output nor to the
// regular plugins, which see the resolved ones produced after booking and
// interpolation.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: ledger/parser.proto

package ledger

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A container for all the parser specs produced on a posting.
// These are the objects that directly represent the parsed input yet to be
// interpolated and booked.
type Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A UnitSpec instance.
	Units *UnitSpec `protobuf:"bytes,8,opt,name=units,proto3,oneof" json:"units,omitempty"`
	// A CostSpec instance. Warning: This particularly filled field is only used in
	// the production of the intermediate representation produced by the parser
	// and never set in the final processed output from Beancount. Do not use
	// this.
	Cost *CostSpec `protobuf:"bytes,9,opt,name=cost,proto3,oneof" json:"cost,omitempty"`
	// A PriceSpec instance.
	Price *PriceSpec `protobuf:"bytes,10,opt,name=price,proto3,oneof" json:"price,omitempty"`
}

func (x *Spec) Reset() {
	*x = Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_parser_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spec) ProtoMessage() {}

func (x *Spec) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_parser_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spec.ProtoReflect.Descriptor instead.
func (*Spec) Descriptor() ([]byte, []int) {
	return file_ledger_parser_proto_rawDescGZIP(), []int{0}
}

func (x *Spec) GetUnits() *UnitSpec {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *Spec) GetCost() *CostSpec {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *Spec) GetPrice() *PriceSpec {
	if x != nil {
		return x.Price
	}
	return nil
}

// A unit specification. This is like `Amount`, except that either the number or
// currency can be missing.
type UnitSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number   *Number `protobuf:"bytes,1,opt,name=number,proto3,oneof" json:"number,omitempty"`
	Currency *string `protobuf:"bytes,2,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
}

func (x *UnitSpec) Reset() {
	*x = UnitSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_parser_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitSpec) ProtoMessage() {}

func (x *UnitSpec) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_parser_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitSpec.ProtoReflect.Descriptor instead.
func (*UnitSpec) Descriptor() ([]byte, []int) {
	return file_ledger_parser_proto_rawDescGZIP(), []int{1}
}

func (x *UnitSpec) GetNumber() *Number {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *UnitSpec) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

// A price specification. This is similar to `Amount`, except that either the
// number or currency can be missing.
type PriceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number   *Number `protobuf:"bytes,1,opt,name=number,proto3,oneof" json:"number,omitempty"`
	Currency *string `protobuf:"bytes,2,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	// A flag that determines whether the expression above refers to a per-unit
	// price or a total price, yet to be calculated.
	IsTotal *bool `protobuf:"varint,3,opt,name=isTotal,proto3,oneof" json:"isTotal,omitempty"`
}

func (x *PriceSpec) Reset() {
	*x = PriceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_parser_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceSpec) ProtoMessage() {}

func (x *PriceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_parser_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceSpec.ProtoReflect.Descriptor instead.
func (*PriceSpec) Descriptor() ([]byte, []int) {
	return file_ledger_parser_proto_rawDescGZIP(), []int{2}
}

func (x *PriceSpec) GetNumber() *Number {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *PriceSpec) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *PriceSpec) GetIsTotal() bool {
	if x != nil && x.IsTotal != nil {
		return *x.IsTotal
	}
	return false
}

// A cost specification, which still requires to be filled in, and the final
// per-unit numbers be calculated. This gets translated to Cost after booking
// and interpolation.
type CostSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A decimal number, exclusive the per-unit cost.
	// TODO(blais): Rename this to number_per_unit; it's been annoying.
	NumberPer *Number `protobuf:"bytes,1,opt,name=numberPer,proto3,oneof" json:"numberPer,omitempty"`
	// A decimal number, the total cost/price.
	NumberTotal *Number `protobuf:"bytes,2,opt,name=numberTotal,proto3,oneof" json:"numberTotal,omitempty"`
	// A string, the commodity of the cost.
	Currency *string `protobuf:"bytes,3,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	// A datetime.date for the date that the lot was created at. There should
	// always be a valid date.
	Date *Date `protobuf:"bytes,4,opt,name=date,proto3,oneof" json:"date,omitempty"`
	// A string for the label of this lot, or None, if there is no label.
	Label *string `protobuf:"bytes,5,opt,name=label,proto3,oneof" json:"label,omitempty"`
	// A flag explicitly indicating to merge all matching lots and compute the
	// average cost.
	MergeCost *bool `protobuf:"varint,6,opt,name=mergeCost,proto3,oneof" json:"mergeCost,omitempty"`
}

func (x *CostSpec) Reset() {
	*x = CostSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_parser_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostSpec) ProtoMessage() {}

func (x *CostSpec) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_parser_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostSpec.ProtoReflect.Descriptor instead.
func (*CostSpec) Descriptor() ([]byte, []int) {
	return file_ledger_parser_proto_rawDescGZIP(), []int{3}
}

func (x *CostSpec) GetNumberPer() *Number {
	if x != nil {
		return x.NumberPer
	}
	return nil
}

func (x *CostSpec) GetNumberTotal() *Number {
	if x != nil {
		return x.NumberTotal
	}
	return nil
}

func (x *CostSpec) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *CostSpec) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *CostSpec) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *CostSpec) GetMergeCost() bool {
	if x != nil && x.MergeCost != nil {
		return *x.MergeCost
	}
	return false
}

var File_ledger_parser_proto protoreflect.FileDescriptor

var file_ledger_parser_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x1a, 0x13, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x01, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2b,
	0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x48,
	0x00, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x04, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x48, 0x01, 0x52, 0x04, 0x63,
	0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x48, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x22, 0x70, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2b, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x22, 0x9c, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x2b, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x69, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x02, 0x52, 0x07, 0x69, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x73, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0xc6, 0x02, 0x0a, 0x08, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x31, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x01, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x05, 0x52, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x65, 0x72, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x19, 0x5a, 0x17, 0x67,
	0x6f, 0x2e, 0x76, 0x69, 0x78, 0x61, 0x6c, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x65, 0x73, 0x70, 0x2f,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ledger_parser_proto_rawDescOnce sync.Once
	file_ledger_parser_proto_rawDescData = file_ledger_parser_proto_rawDesc
)

func file_ledger_parser_proto_rawDescGZIP() []byte {
	file_ledger_parser_proto_rawDescOnce.Do(func() {
		file_ledger_parser_proto_rawDescData = protoimpl.X.CompressGZIP(file_ledger_parser_proto_rawDescData)
	})
	return file_ledger_parser_proto_rawDescData
}

var file_ledger_parser_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ledger_parser_proto_goTypes = []interface{}{
	(*Spec)(nil),      // 0: ledger.Spec
	(*UnitSpec)(nil),  // 1: ledger.UnitSpec
	(*PriceSpec)(nil), // 2: ledger.PriceSpec
	(*CostSpec)(nil),  // 3: ledger.CostSpec
	(*Number)(nil),    // 4: ledger.Number
	(*Date)(nil),      // 5: ledger.Date
}
var file_ledger_parser_proto_depIdxs = []int32{
	1, // 0: ledger.Spec.units:type_name -> ledger.UnitSpec
	3, // 1: ledger.Spec.cost:type_name -> ledger.CostSpec
	2, // 2: ledger.Spec.price:type_name -> ledger.PriceSpec
	4, // 3: ledger.UnitSpec.number:type_name -> ledger.Number
	4, // 4: ledger.PriceSpec.number:type_name -> ledger.Number
	4, // 5: ledger.CostSpec.numberPer:type_name -> ledger.Number
	4, // 6: ledger.CostSpec.numberTotal:type_name -> ledger.Number
	5, // 7: ledger.CostSpec.date:type_name -> ledger.Date
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_ledger_parser_proto_init() }
func file_ledger_parser_proto_init() {
	if File_ledger_parser_proto != nil {
		return
	}
	file_ledger_number_proto_init()
	file_ledger_date_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ledger_parser_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_parser_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_parser_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_parser_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ledger_parser_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_ledger_parser_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_ledger_parser_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_ledger_parser_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ledger_parser_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ledger_parser_proto_goTypes,
		DependencyIndexes: file_ledger_parser_proto_depIdxs,
		MessageInfos:      file_ledger_parser_proto_msgTypes,
	}.Build()
	File_ledger_parser_proto = out.File
	file_ledger_parser_proto_rawDesc = nil
	file_ledger_parser_proto_goTypes = nil
	file_ledger_parser_proto_depIdxs = nil
}
